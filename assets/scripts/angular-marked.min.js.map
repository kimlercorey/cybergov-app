{"version":3,"sources":["angular-marked.min.js"],"names":["markedProvider","self","this","setRenderer","opts","renderer","setOptions","defaults","$get","$log","$window","wrapNonBindable","string","m","require","err","marked","angular","isUndefined","error","r","Renderer","o","Object","keys","l","length","renderCode","code","bind","lang","escaped","renderCodespan","codespan","markedDirective","$templateRequest","$compile","restrict","replace","scope","compile","src","link","element","attrs","set","text","unindent","String","html","$eval","contents","$parent","$watch","then","response","$emit","$inject","module","exports","directive","provider","name"],"mappings":"AAQA,YAuJA,SAASA,kBACP,GAAIC,MAAOC,IAUXD,MAAKE,YAAc,SAAUC,MAC3BF,KAAKG,SAAWD,MAWlBH,KAAKK,WAAa,SAAUF,MAC1BF,KAAKK,SAAWH,MAGlBH,KAAKO,MAAQ,OAAQ,UAAW,SAAUC,KAAMC,SA4B9C,QAASC,iBAAgBC,QACvB,MAAO,yBAA2BA,OAAS,UA5B7C,GAAIC,EAEJ,KACEA,EAAIC,QAAQ,UACZ,MAAOC,KACPF,EAAIH,QAAQM,QAAUA,OAGxB,GAAIC,QAAQC,YAAYL,GAEtB,WADAJ,MAAKU,MAAM,2EAIb,IAAIC,GAAI,GAAIP,GAAEQ,QAId,IAAIpB,KAAKI,SAIP,IAHA,GAAIiB,GAAIC,OAAOC,KAAKvB,KAAKI,UACrBoB,EAAIH,EAAEI,OAEHD,KACLL,EAAEE,EAAEG,IAAMxB,KAAKI,SAASiB,EAAEG,GAS9B,IAAIE,YAAaP,EAAEQ,KAAKC,KAAKT,EAC7BA,GAAEQ,KAAO,SAAUA,KAAME,KAAMC,SAC7B,MAAOpB,iBAAgBgB,WAAWC,KAAME,KAAMC,UAEhD,IAAIC,gBAAiBZ,EAAEa,SAASJ,KAAKT,EAWrC,OAVAA,GAAEa,SAAW,SAAUL,MACrB,MAAOjB,iBAAgBqB,eAAeJ,QAIxC3B,KAAKM,SAAWN,KAAKM,aACrBN,KAAKM,SAASF,SAAWe,EAEzBP,EAAEP,WAAWL,KAAKM,UAEXM,IAwEX,QAASqB,iBAAgBlB,OAAQmB,iBAAkBC,UACjD,OACEC,SAAU,KACVC,SAAS,EACTC,OACEnC,KAAM,IACNY,OAAQ,IACRwB,QAAS,IACTC,IAAK,KAEPC,KAAM,SAAUH,MAAOI,QAASC,OAiB9B,QAASC,KAAIC,MACXA,KAAOC,SAASC,OAAOF,MAAQ,KAC/BH,QAAQM,KAAKjC,OAAO8B,KAAMP,MAAMnC,MAAQ,OACpCmC,MAAMW,MAAMN,MAAMJ,UACpBJ,SAASO,QAAQQ,YAAYZ,MAAMa,SApBnCR,MAAM5B,QACR6B,IAAIN,MAAMvB,QACVuB,MAAMc,OAAO,SAAUR,MACdD,MAAMH,IACfF,MAAMc,OAAO,MAAO,SAAUZ,KAC5BN,iBAAiBM,KAAK,GAAMa,KAAK,SAAUC,UACzCV,IAAIU,WACH,WACDV,IAAI,IACJN,MAAMiB,MAAM,sBAAuBZ,MAAMH,SAI7CI,IAAIF,QAAQG,UA/TpB,GAAIC,UAAWjC,QAAQ,iBAsSvBoB,iBAAgBuB,SAAW,SAAU,mBAAoB,YAuCzDC,OAAOC,QACL1C,QAAQyC,OAAO,gBACZE,UAAU,SAAU1B,iBACpB2B,SAAS,SAAU7D,gBACnB8D","file":"angular-marked.min.js","sourcesContent":["/*\n * angular-marked\n * (c) 2014 - 2016 J. Harshbarger\n * Licensed MIT\n */\n\n/* global angular, marked */\n\n'use strict';\n\nvar unindent = require('./strip-indent');\n\n  /**\n   * @ngdoc overview\n   * @name index\n   *\n   * @description\n   * AngularJS Markdown using [marked](https://github.com/chjj/marked).\n   *\n   * ## Why?\n   *\n   * I wanted to use [marked](https://github.com/chjj/marked) instead of [showdown](https://github.com/coreyti/showdown) as used in [angular-markdown-directive](https://github.com/btford/angular-markdown-directive) as well as expose the option to globally set defaults.\n   *\n   * ## How?\n   *\n   * - {@link hc.marked.directive:marked As a directive}\n   * - {@link hc.marked.service:marked As a service}\n   * - {@link hc.marked.service:markedProvider Set default options}\n   *\n   * @example\n\n      Convert markdown to html at run time.  For example:\n\n      <example module=\"app\">\n        <file name=\"example.html\">\n          <form ng-controller=\"MainController\">\n            Markdown:<br />\n            <textarea ng-model=\"my_markdown\" cols=\"60\" rows=\"5\" class=\"span8\"></textarea><br />\n            Output:<br />\n            <div marked=\"my_markdown\" />\n          </form>\n        </file>\n        <file  name=\"example.js\">\n          function MainController($scope) {\n            $scope.my_markdown = \"*This* **is** [markdown](https://daringfireball.net/projects/markdown/)\";\n          }\n          angular.module('app', ['hc.marked']).controller('MainController', MainController);\n        </file>\n      </example>\n\n    *\n    */\n\n    /**\n     * @ngdoc overview\n     * @name hc.marked\n     * @description # angular-marked (core module)\n       # Installation\n      First include angular-marked.js in your HTML:\n\n      ```js\n        <script src=\"angular-marked.js\">\n      ```\n\n      Then load the module in your application by adding it as a dependency:\n\n      ```js\n      angular.module('yourApp', ['hc.marked']);\n      ```\n\n      With that you're ready to get started!\n     */\n\n    /**\n    * @ngdoc service\n    * @name hc.marked.service:marked\n    * @requires $window\n    * @description\n    * A reference to the [marked](https://github.com/chjj/marked) parser.\n    *\n    * @example\n    <example module=\"app\">\n      <file name=\"example.html\">\n        <div ng-controller=\"MainController\">\n          html: {{html}}\n        </div>\n      </file>\n      <file  name=\"example.js\">\n        function MainController($scope, marked) {\n          $scope.html = marked('#TEST');\n        }\n        angular.module('app', ['hc.marked']).controller('MainController', MainController);\n      </file>\n    </example>\n   **/\n\n   /**\n   * @ngdoc service\n   * @name hc.marked.service:markedProvider\n   * @description\n   * Use `markedProvider` to change the default behavior of the {@link hc.marked.service:marked marked} service.\n   *\n   * @example\n\n    ## Example using [google-code-prettify syntax highlighter](https://code.google.com/p/google-code-prettify/) (must include google-code-prettify.js script).  Also works with [highlight.js Javascript syntax highlighter](http://highlightjs.org/).\n\n    <example module=\"myAppA\">\n      <file name=\"exampleA.js\">\n      angular.module('myAppA', ['hc.marked'])\n        .config(['markedProvider', function(markedProvider) {\n          markedProvider.setOptions({\n            gfm: true,\n            tables: true,\n            highlight: function (code) {\n              return prettyPrintOne(code);\n            }\n          });\n        }]);\n      </file>\n      <file name=\"exampleA.html\">\n        <marked>\n        ```js\n        angular.module('myAppA', ['hc.marked'])\n          .config(['markedProvider', function(markedProvider) {\n            markedProvider.setOptions({\n              gfm: true,\n              tables: true,\n              highlight: function (code) {\n                return prettyPrintOne(code);\n              }\n            });\n          }]);\n        ```\n        </marked>\n      </file>\n    </example>\n\n    ## Example overriding the way custom markdown links are displayed\n\n    <example module=\"myAppB\">\n      <file name=\"exampleB.js\">\n      angular.module('myAppB', ['hc.marked'])\n        .config(['markedProvider', function(markedProvider) {\n          markedProvider.setRenderer({\n            link: function(href, title, text) {\n              return \"<a href='\" + href + \"'\" + (title ? \" title='\" + title + \"'\" : '') + \" target='_blank'>\" + text + \"</a>\";\n            }\n          });\n        }]);\n      </file>\n      <file name=\"exampleB.html\">\n        <marked>\n          This is [an example](http://example.com/ \"Title\") inline link.\n          [This link](http://example.net/) has no title attribute.\n        </marked>\n      </file>\n    </example>\n  **/\n\nfunction markedProvider() {\n  var self = this;\n\n  /**\n   * @ngdoc method\n   * @name markedProvider#setRenderer\n   * @methodOf hc.marked.service:markedProvider\n   *\n   * @param {object} opts Default renderer options for [marked](https://github.com/chjj/marked#overriding-renderer-methods).\n   */\n\n  self.setRenderer = function (opts) {\n    this.renderer = opts;\n  };\n\n  /**\n   * @ngdoc method\n   * @name markedProvider#setOptions\n   * @methodOf hc.marked.service:markedProvider\n   *\n   * @param {object} opts Default options for [marked](https://github.com/chjj/marked#options-1).\n   */\n\n  self.setOptions = function (opts) {  // Store options for later\n    this.defaults = opts;\n  };\n\n  self.$get = ['$log', '$window', function ($log, $window) {\n    var m;\n\n    try {\n      m = require('marked');\n    } catch (err) {\n      m = $window.marked || marked;\n    }\n\n    if (angular.isUndefined(m)) {\n      $log.error('angular-marked Error: marked not loaded.  See installation instructions.');\n      return;\n    }\n\n    var r = new m.Renderer();\n\n    // override rendered markdown html\n    // with custom definitions if defined\n    if (self.renderer) {\n      var o = Object.keys(self.renderer);\n      var l = o.length;\n\n      while (l--) {\n        r[o[l]] = self.renderer[o[l]];\n      }\n    }\n\n    // Customize code and codespan rendering to wrap default or overriden output in a ng-non-bindable span\n    function wrapNonBindable(string) {\n      return '<span ng-non-bindable>' + string + '</span>';\n    }\n\n    var renderCode = r.code.bind(r);\n    r.code = function (code, lang, escaped) {\n      return wrapNonBindable(renderCode(code, lang, escaped));\n    };\n    var renderCodespan = r.codespan.bind(r);\n    r.codespan = function (code) {\n      return wrapNonBindable(renderCodespan(code));\n    };\n\n    // add the new renderer to the options if need be\n    self.defaults = self.defaults || {};\n    self.defaults.renderer = r;\n\n    m.setOptions(self.defaults);\n\n    return m;\n  }];\n}\n\n  // xTODO: filter and tests */\n  // app.filter('marked', ['marked', function(marked) {\n  //   return marked;\n  // }]);\n\n  /**\n   * @ngdoc directive\n   * @name hc.marked.directive:marked\n   * @restrict AE\n   * @element any\n   *\n   * @description\n   * Compiles source test into HTML.\n   *\n   * @param {expression=} marked The source text to be compiled.  If blank uses content as the source.\n   * @param {expression=} opts Hash of options that override defaults.\n   * @param {boolean=} compile Set to true to to support AngularJS directives inside markdown.\n   * @param {string=} src Expression evaluating to URL. If the source is a string constant,\n   *                 make sure you wrap it in **single** quotes, e.g. `src=\"'myPartialTemplate.html'\"`.\n   *\n   * @example\n\n     ## A simple block of text\n\n      <example module=\"hc.marked\">\n        <file name=\"exampleA.html\">\n         * <marked>\n         *   ### Markdown directive\n         *\n         *   *It works!*\n         *\n         *   *This* **is** [markdown](https://daringfireball.net/projects/markdown/) in the view.\n         * </marked>\n        </file>\n      </example>\n\n     ## Bind to a scope variable\n\n      <example module=\"app\">\n        <file name=\"exampleB.html\">\n          <form ng-controller=\"MainController\">\n            Markdown:<br />\n            <textarea ng-model=\"my_markdown\" class=\"span8\" cols=\"60\" rows=\"5\"></textarea><br />\n            Output:<br />\n            <blockquote marked=\"my_markdown\"></blockquote>\n          </form>\n        </file>\n        <file  name=\"exampleB.js\">\n          * function MainController($scope) {\n          *     $scope.my_markdown = '*This* **is** [markdown](https://daringfireball.net/projects/markdown/)';\n          *     $scope.my_markdown += ' in a scope variable';\n          * }\n          * angular.module('app', ['hc.marked']).controller('MainController', MainController);\n        </file>\n      </example>\n\n      ## Include a markdown file:\n\n       <example module=\"hc.marked\">\n         <file name=\"exampleC.html\">\n           <div marked src=\"'include.html'\" />\n         </file>\n         * <file name=\"include.html\">\n         * *This* **is** [markdown](https://daringfireball.net/projects/markdown/) in a include file.\n         * </file>\n       </example>\n   */\nmarkedDirective.$inject = ['marked', '$templateRequest', '$compile'];\nfunction markedDirective(marked, $templateRequest, $compile) {\n  return {\n    restrict: 'AE',\n    replace: true,\n    scope: {\n      opts: '=',\n      marked: '=',\n      compile: '@',\n      src: '='\n    },\n    link: function (scope, element, attrs) {\n      if (attrs.marked) {\n        set(scope.marked);\n        scope.$watch('marked', set);\n      } else if (attrs.src) {\n        scope.$watch('src', function (src) {\n          $templateRequest(src, true).then(function (response) {\n            set(response);\n          }, function () {\n            set('');\n            scope.$emit('$markedIncludeError', attrs.src);\n          });\n        });\n      } else {\n        set(element.text());\n      }\n\n      function set(text) {\n        text = unindent(String(text || ''));\n        element.html(marked(text, scope.opts || null));\n        if (scope.$eval(attrs.compile)) {\n          $compile(element.contents())(scope.$parent);\n        }\n      }\n    }\n  };\n}\n\nmodule.exports =\n  angular.module('hc.marked', [])\n    .directive('marked', markedDirective)\n    .provider('marked', markedProvider)\n    .name;\n"]}