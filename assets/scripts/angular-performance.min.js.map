{"version":3,"sources":["angular-performance.min.js"],"names":["perf","angular","module","directive","restrict","link","scope","element","attrs","startTime","Date","getTime","divs","$on","event","args","index","indexOf","splice","length","finishTime","initialLoad","window","performance","timing","loadEventEnd","navigationStart","i","Image","src","performanceBeacon","push","$timeout","$emit","$id","unwatchLoaded","$watch","performanceLoaded","newValue","oldValue"],"mappings":"AAAA,GAAIA,MAAOC,QAAQC,OAAO,iBAS1BF,MAAKG,UAAU,eAAgB,WAC3B,OACIC,SAAU,IACVC,KAAM,SAAUC,MAAOC,QAASC,OAE5B,GAAIC,YAAY,GAAKC,OAAMC,UACvBC,OAEJN,OAAMO,IAAI,YAAa,SAAUC,MAAOC,MACpC,GAAIC,OAAQJ,KAAKK,QAAQF,KAIzB,IAHIC,OAAS,GAAGJ,KAAKM,OAAOF,MAAO,GAG/BA,OAAS,GAAoB,GAAfJ,KAAKO,OAAa,CAChC,GAAIC,aAAa,GAAKV,OAAMC,UAAYF,UACpCY,YAAc,CACdC,QAAOC,cACPF,YAAcC,OAAOC,YAAYC,OAAOC,aAAeH,OAAOC,YAAYC,OAAOE,gBAGrF,IAAIC,GAAI,GAAIC,MACZD,GAAEE,IAAMrB,MAAMsB,kBAAoB,YAAcV,WAAa,YAAcC,YAAc,SAAWb,MAAMe,eAIlHjB,MAAMO,IAAI,gBAAiB,SAAUC,MAAOC,MACxCH,KAAKmB,KAAKhB,aAU1Bf,KAAKG,UAAU,qBAAsB,WAAY,SAAU6B,UAEvD,OACI5B,SAAU,IACVC,KAAM,SAAUC,MAAOC,QAASC,OAG5BwB,SAAS,WACL1B,MAAM2B,MAAM,gBAAiB3B,MAAM4B,MACpC,EAGH,IAAIC,eAAgB7B,MAAM8B,OAAO5B,MAAM6B,kBAAmB,SAAUC,SAAUC,UACtED,WACAhC,MAAM2B,MAAM,YAAa3B,MAAM4B,KAE/BC","file":"angular-performance.min.js","sourcesContent":["var perf = angular.module('performance', []);\n\n\n\n/**\n * Listens for performanceLoaded events and sends a message to the beacon\n *\n * @see performanceLoaded\n */\nperf.directive('performance', [function () {\n    return {\n        restrict: 'A',\n        link: function (scope, element, attrs) {\n\n            var startTime = (new Date).getTime();\n            var divs = [];\n\n            scope.$on('PERF_DONE', function (event, args) {\n                var index = divs.indexOf(args);\n                if (index >= 0) divs.splice(index, 1);\n\n                //Call beacon when all emits have been received\n                if (index >= 0 && divs.length == 0) {\n                    var finishTime = (new Date).getTime() - startTime;\n                    var initialLoad = 0;\n                    if (window.performance) {\n                        initialLoad = window.performance.timing.loadEventEnd - window.performance.timing.navigationStart;\n                    }\n\n                    var i = new Image();\n                    i.src = attrs.performanceBeacon + '?content=' + finishTime + '&initial=' + initialLoad + '&name=' + attrs.performance;\n                }\n            });\n\n            scope.$on('PERF_REGISTER', function (event, args) {\n                divs.push(args);\n            });\n        }\n    };\n}]);\n\n/**\n * Registers itself and watches a scope variable for changes to indicate that it is done\n *\n */\nperf.directive('performanceLoaded', ['$timeout', function ($timeout) {\n\n    return {\n        restrict: 'A',\n        link: function (scope, element, attrs) {\n\n\n            $timeout(function () {\n                scope.$emit('PERF_REGISTER', scope.$id);\n            }, 0);\n\n\n            var unwatchLoaded = scope.$watch(attrs.performanceLoaded, function (newValue, oldValue) {\n                if (newValue) {\n                    scope.$emit('PERF_DONE', scope.$id);\n                    //Unregisters the $watch\n                    unwatchLoaded();\n                }\n            });\n        }\n    }\n}]);\n\n\n\n"]}