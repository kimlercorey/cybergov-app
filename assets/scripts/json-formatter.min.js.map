{"version":3,"sources":["json-formatter.min.js"],"names":["angular","module","provider","hoverPreviewEnabled","hoverPreviewArrayCount","hoverPreviewFieldCount","value","parseInt","$get","directive","RecursionHelper","JSONFormatterConfig","escapeString","str","replace","getObjectName","object","undefined","constructor","funcNameRegex","results","exec","toString","length","getType","getValuePreview","type","getPreview","isObject","isArray","link","scope","json","getKeys","Object","keys","map","key","hasKey","getConstructorName","Date","isDate","indexOf","isUrl","isEmptyObject","isOpen","open","toggleOpen","childrenOpen","openLink","window","location","href","parseValue","showThumbnail","getThumbnail","join","narrowKeys","slice","kvs","ellipsis","templateUrl","restrict","compile","element","exports","factory","$compile","isFunction","post","compiledContents","contents","remove","pre","clone","append","apply","arguments","run","$templateCache","put"],"mappings":"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","file":"json-formatter.min.js","sourcesContent":["/*!\n * jsonformatter\n * \n * Version: 0.6.0 - 2016-04-28T02:57:03.650Z\n * License: Apache-2.0\n */\n\n\n'use strict';\n\nangular.module('jsonFormatter', ['RecursionHelper'])\n\n.provider('JSONFormatterConfig', function JSONFormatterConfigProvider() {\n\n  // Default values for hover preview config\n  var hoverPreviewEnabled = false;\n  var hoverPreviewArrayCount = 100;\n  var hoverPreviewFieldCount = 5;\n\n  return {\n    get hoverPreviewEnabled() {\n      return hoverPreviewEnabled;\n    },\n    set hoverPreviewEnabled(value) {\n     hoverPreviewEnabled = !!value;\n    },\n\n    get hoverPreviewArrayCount() {\n      return hoverPreviewArrayCount;\n    },\n    set hoverPreviewArrayCount(value) {\n      hoverPreviewArrayCount = parseInt(value, 10);\n    },\n\n    get hoverPreviewFieldCount() {\n      return hoverPreviewFieldCount;\n    },\n    set hoverPreviewFieldCount(value) {\n      hoverPreviewFieldCount = parseInt(value, 10);\n    },\n\n    $get: function () {\n      return {\n        hoverPreviewEnabled: hoverPreviewEnabled,\n        hoverPreviewArrayCount: hoverPreviewArrayCount,\n        hoverPreviewFieldCount: hoverPreviewFieldCount\n      };\n    }\n  };\n})\n\n.directive('jsonFormatter', ['RecursionHelper', 'JSONFormatterConfig', function jsonFormatterDirective(RecursionHelper, JSONFormatterConfig) {\n  function escapeString(str) {\n    return str.replace('\"', '\\\"');\n  }\n\n  // From http://stackoverflow.com/a/332429\n  function getObjectName(object) {\n    if (object === undefined) {\n      return '';\n    }\n    if (object === null) {\n      return 'Object';\n    }\n    if (typeof object === 'object' && !object.constructor) {\n        return 'Object';\n    }\n    var funcNameRegex = /function (.{1,})\\(/;\n    var results = (funcNameRegex).exec((object).constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    } else {\n      return '';\n    }\n  }\n\n  function getType(object) {\n    if (object === null) { return 'null'; }\n    return typeof object;\n  }\n\n  function getValuePreview (object, value) {\n    var type = getType(object);\n\n    if (type === 'null' || type === 'undefined') { return type; }\n\n    if (type === 'string') {\n      value = '\"' + escapeString(value) + '\"';\n    }\n    if (type === 'function'){\n\n      // Remove content of the function\n      return object.toString()\n          .replace(/[\\r\\n]/g, '')\n          .replace(/\\{.*\\}/, '') + '{…}';\n\n    }\n    return value;\n  }\n\n  function getPreview(object) {\n    var value = '';\n    if (angular.isObject(object)) {\n      value = getObjectName(object);\n      if (angular.isArray(object))\n        value += '[' + object.length + ']';\n    } else {\n      value = getValuePreview(object, object);\n    }\n    return value;\n  }\n\n  function link(scope) {\n    scope.isArray = function () {\n      return angular.isArray(scope.json);\n    };\n\n    scope.isObject = function() {\n      return angular.isObject(scope.json);\n    };\n\n    scope.getKeys = function (){\n      if (scope.isObject()) {\n        return Object.keys(scope.json).map(function(key) {\n          if (key === '') { return '\"\"'; }\n          return key;\n        });\n      }\n    };\n    scope.type = getType(scope.json);\n    scope.hasKey = typeof scope.key !== 'undefined';\n    scope.getConstructorName = function(){\n      return getObjectName(scope.json);\n    };\n\n    if (scope.type === 'string'){\n\n      // Add custom type for date\n      if((new Date(scope.json)).toString() !== 'Invalid Date') {\n        scope.isDate = true;\n      }\n\n      // Add custom type for URLs\n      if (scope.json.indexOf('http') === 0) {\n        scope.isUrl = true;\n      }\n    }\n\n    scope.isEmptyObject = function () {\n      return scope.getKeys() && !scope.getKeys().length &&\n        scope.isOpen && !scope.isArray();\n    };\n\n\n    // If 'open' attribute is present\n    scope.isOpen = !!scope.open;\n    scope.toggleOpen = function () {\n      scope.isOpen = !scope.isOpen;\n    };\n    scope.childrenOpen = function () {\n      if (scope.open > 1){\n        return scope.open - 1;\n      }\n      return 0;\n    };\n\n    scope.openLink = function (isUrl) {\n      if(isUrl) {\n        window.location.href = scope.json;\n      }\n    };\n\n    scope.parseValue = function (value){\n      return getValuePreview(scope.json, value);\n    };\n\n    scope.showThumbnail = function () {\n      return !!JSONFormatterConfig.hoverPreviewEnabled && scope.isObject() && !scope.isOpen;\n    };\n\n    scope.getThumbnail = function () {\n      if (scope.isArray()) {\n\n        // if array length is greater then 100 it shows \"Array[101]\"\n        if (scope.json.length > JSONFormatterConfig.hoverPreviewArrayCount) {\n          return 'Array[' + scope.json.length + ']';\n        } else {\n          return '[' + scope.json.map(getPreview).join(', ') + ']';\n        }\n      } else {\n\n        var keys = scope.getKeys();\n\n        // the first five keys (like Chrome Developer Tool)\n        var narrowKeys = keys.slice(0, JSONFormatterConfig.hoverPreviewFieldCount);\n\n        // json value schematic information\n        var kvs = narrowKeys\n          .map(function (key) { return key + ':' + getPreview(scope.json[key]); });\n\n        // if keys count greater then 5 then show ellipsis\n        var ellipsis = keys.length >= 5 ? '…' : '';\n\n        return '{' + kvs.join(', ') + ellipsis + '}';\n      }\n    };\n  }\n\n  return {\n    templateUrl: 'json-formatter.html',\n    restrict: 'E',\n    replace: true,\n    scope: {\n      json: '=',\n      key: '=',\n      open: '='\n    },\n    compile: function(element) {\n\n      // Use the compile function from the RecursionHelper,\n      // And return the linking function(s) which it returns\n      return RecursionHelper.compile(element, link);\n    }\n  };\n}]);\n\n// Export to CommonJS style imports. Exporting this string makes this valid:\n// angular.module('myApp', [require('jsonformatter')]);\nif (typeof module === 'object') {\n  module.exports = 'jsonFormatter';\n}\n'use strict';\n\n// from http://stackoverflow.com/a/18609594\nangular.module('RecursionHelper', []).factory('RecursionHelper', ['$compile', function($compile){\n  return {\n    /**\n     * Manually compiles the element, fixing the recursion loop.\n     * @param element\n     * @param [link] A post-link function, or an object with function(s)\n     * registered via pre and post properties.\n     * @returns An object containing the linking functions.\n     */\n    compile: function(element, link){\n      // Normalize the link parameter\n      if(angular.isFunction(link)){\n        link = { post: link };\n      }\n\n      // Break the recursion loop by removing the contents\n      var contents = element.contents().remove();\n      var compiledContents;\n      return {\n        pre: (link && link.pre) ? link.pre : null,\n        /**\n         * Compiles and re-adds the contents\n         */\n        post: function(scope, element){\n          // Compile the contents\n          if(!compiledContents){\n            compiledContents = $compile(contents);\n          }\n          // Re-add the compiled contents to the element\n          compiledContents(scope, function(clone){\n            element.append(clone);\n          });\n\n          // Call the post-linking function, if any\n          if(link && link.post){\n            link.post.apply(null, arguments);\n          }\n        }\n      };\n    }\n  };\n}]);\n\nangular.module(\"jsonFormatter\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"json-formatter.html\",\"<div ng-init=\\\"isOpen = open && open > 0\\\" class=\\\"json-formatter-row\\\"><a ng-click=\\\"toggleOpen()\\\"><span class=\\\"toggler {{isOpen ? \\'open\\' : \\'\\'}}\\\" ng-if=\\\"isObject()\\\"></span> <span class=\\\"key\\\" ng-if=\\\"hasKey\\\"><span class=\\\"key-text\\\">{{key}}</span><span class=\\\"colon\\\">:</span></span> <span class=\\\"value\\\"><span ng-if=\\\"isObject()\\\"><span class=\\\"constructor-name\\\">{{getConstructorName(json)}}</span> <span ng-if=\\\"isArray()\\\"><span class=\\\"bracket\\\">[</span><span class=\\\"number\\\">{{json.length}}</span><span class=\\\"bracket\\\">]</span></span></span> <span ng-if=\\\"!isObject()\\\" ng-click=\\\"openLink(isUrl)\\\" class=\\\"{{type}}\\\" ng-class=\\\"{date: isDate, url: isUrl}\\\">{{parseValue(json)}}</span></span> <span ng-if=\\\"showThumbnail()\\\" class=\\\"thumbnail-text\\\">{{getThumbnail()}}</span></a><div class=\\\"children\\\" ng-if=\\\"getKeys().length && isOpen\\\"><json-formatter ng-repeat=\\\"key in getKeys() track by $index\\\" json=\\\"json[key]\\\" key=\\\"key\\\" open=\\\"childrenOpen()\\\"></json-formatter></div><div class=\\\"children empty object\\\" ng-if=\\\"isEmptyObject()\\\"></div><div class=\\\"children empty array\\\" ng-if=\\\"getKeys() && !getKeys().length && isOpen && isArray()\\\"></div></div>\");}]);"]}