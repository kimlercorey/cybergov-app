{"version":3,"sources":["angular-ui-router.min.js"],"names":["module","exports","window","angular","undefined","inherit","parent","extra","extend","prototype","merge","dst","forEach","arguments","obj","value","key","hasOwnProperty","ancestors","first","second","path","n","push","objectKeys","object","Object","keys","result","val","indexOf","array","Array","Number","len","length","from","Math","ceil","floor","inheritParams","currentParams","newParams","$current","$to","parentParams","parents","inherited","inheritList","i","params","j","equalForKeys","a","b","k","filterByKeys","values","filtered","name","pick","copy","concat","apply","slice","call","omit","filter","collection","callback","isArray","map","$Resolve","$q","$injector","VISIT_IN_PROGRESS","VISIT_DONE","NOTHING","NO_DEPENDENCIES","NO_LOCALS","NO_PARENT","when","$$promises","$$values","this","study","invocables","visit","visited","cycle","splice","Error","join","isString","plan","get","annotate","param","pop","isResolve","isObject","then","invocableKeys","locals","self","done","wait","merged","$$inheritedValues","resolution","resolve","fail","reason","$$failure","reject","invoke","invocable","onfailure","invocation","proceed","isDefined","promise","e","defer","waitParams","dep","promises","ii","$TemplateFactory","$http","$templateCache","fromConfig","config","template","fromString","templateUrl","fromUrl","templateProvider","fromProvider","isFunction","url","cache","headers","Accept","response","data","provider","UrlMatcher","pattern","parentMatcher","addParameter","id","type","location","paramNames","test","$$UMFP","Param","quoteRegExp","string","squash","optional","surroundPattern","replace","matchDetails","m","isSearch","regexp","segment","cfg","substring","last","index","RegExp","caseInsensitive","placeholder","searchPlaceholder","compiled","segments","$$new","ParamSet","source","p","exec","isOptional","lastIndex","search","sourceSearch","sourcePath","strict","prefix","$$paramNames","Type","$UrlMatcherFactory","valToString","toString","valFromString","getDefaultConfig","isStrictMode","isCaseInsensitive","isInjectable","flushTypeQueue","typeQueue","shift","$types","injector","def","defaultSquashPolicy","enqueue","defaultTypes","encode","decode","is","int","parseInt","bool","date","getFullYear","getMonth","getDate","match","capture","Date","isNaN","valueOf","equals","toISOString","json","toJson","fromJson","any","identity","$$getDefaultValue","strictMode","compile","isMatcher","o","definition","definitionFn","$get","unwrapShorthand","isShorthand","$$fn","getType","urlType","getArrayMode","arrayDefaults","arrayParamNomenclature","getSquashPolicy","getReplace","arrayMode","configuredKeys","defaultPolicy","to","item","defaultValue","$value","hasReplaceVal","$replace","replacement","$normalize","$asArray","dynamic","$$parent","$$keys","chain","ignore","reverse","paramset","paramValues","$$equals","paramValues1","paramValues2","equal","left","right","$$validates","rawVal","normalized","encoded","$UrlRouterProvider","$locationProvider","$urlMatcherFactory","regExpPrefix","re","interpolate","what","handleIfMatch","handler","$match","$location","$rootScope","$browser","$sniffer","appendBasePath","isHtml5","absolute","baseHref","update","evt","check","rule","handled","defaultPrevented","lastPushedUrl","rules","otherwise","listen","listener","$on","interceptDeferred","sync","read","urlMatcher","options","format","$$avoidResync","href","validates","html5Mode","enabled","history","hashPrefix","slash","port","protocol","host","redirect","handlerIsString","strategies","matcher","regex","global","sticky","deferIntercept","$inject","$StateProvider","$urlRouterProvider","isRelative","stateName","findState","stateOrName","base","isStr","rel","split","pathLength","current","state","states","queueState","parentName","queue","flushQueuedChildren","queued","registerState","lastIndexOf","stateBuilder","$delegates","abstractKey","$stateParams","$state","navigable","transitionTo","isGlob","text","doesStateMatchGlob","glob","globSegments","l","unshift","MAX_VALUE","decorator","func","$view","$resolve","$urlRouter","handleRedirect","$broadcast","TransitionAborted","retry","$retry","TransitionFailed","retryTransition","transition","TransitionSuperseded","toParams","resolveState","paramsAreFiltered","resolveViews","viewsPromises","views","view","injectables","$template","load","globals","notify","controllerProvider","injectLocals","$$controller","controller","$$state","$$controllerAs","controllerAs","all","TransitionPrevented","root","reload","go","relative","fromParams","fromPath","toState","hash","redirectResult","toPath","keep","toLocals","reloadState","ownParams","shouldSkipReload","resolved","entering","exiting","onExit","onEnter","error","includes","lossy","nav","context","nonSearchParamsEqual","fromAndToState","notSearchParam","nonQueryParamKeys","nonQueryParams","nonQueryParamSet","reloadOnSearch","compositeName","charAt","","abstract","$ViewProvider","$templateFactory","defaults","async","$ViewScrollProvider","useAnchorScroll","$anchorScroll","$timeout","$element","scrollIntoView","$ViewDirective","$uiViewScroll","$interpolate","getService","service","has","getRenderer","attrs","scope","animEnabled","element","ngMajorVer","ngMinorVer","$animate","$animator","statics","enter","target","cb","after","leave","remove","noanimation","version","minor","animate","directive","restrict","terminal","priority","transclude","tElement","tAttrs","$transclude","cleanupLastView","cleanOld","_previousEl","_currentScope","$destroy","previousEl","currentScope","_willBeDestroyed","currentEl","renderer","updateView","firstTime","newScope","getUiViewName","previousLocals","latestLocals","$new","$emit","clone","autoScrollExp","$eval","onloadExp","onload","autoscroll","$ViewDirectiveFill","$compile","$controller","initial","html","link","contents","$scope","children","uiView","inheritedData","parseStateRef","ref","parsed","preparsed","paramExpr","stateContext","el","stateData","getTypeInfo","isSvg","prop","isForm","nodeName","attr","isAnchor","toUpperCase","clickable","clickHook","button","which","ctrlKey","metaKey","shiftKey","preventDefault","ignorePreventDefaultCount","cancel","defaultOpts","$StateRefDirective","require","uiSrefActive","uiSref","active","uiSrefOpts","$$addStateInfo","$set","$watch","bind","$StateRefDynamicDirective","runStateRefLink","group","uiState","uiStateParams","uiStateOpts","watch","$StateRefActiveDirective","$attrs","addState","stateParams","activeClass","stateHash","createStateHash","activeClasses","anyMatch","addClass","removeClass","exactMatch","activeEqClass","className","uiSrefActiveEq","newState","$IsStateFilter","isFilter","$stateful","$IncludedByStateFilter","includesFilter","defaultConfig","searchParams","decodePathArray","reverseString","str","unquoteDashes","allReversed","paramName","parameters","nTotal","nPath","paramVal","encodeDashes","encodeURIComponent","c","charCodeAt","isPathParam","isDefaultValue","nextSegment","isFinalPathParam","$subPattern","sub","substr","mode","ArrayType","bindTo","callbackName","arrayWrap","arrayUnwrap","falsey","arrayHandler","allTruthyMode","arrayEqualsHandler","val1","val2","$arrayMode","run","factory","major"],"mappings":"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","file":"angular-ui-router.min.js","sourcesContent":["/**\n * State-based routing for AngularJS\n * @version v0.2.18\n * @link http://angular-ui.github.com/\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n/* commonjs package manager support (eg componentjs) */\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'ui.router';\n}\n\n(function (window, angular, undefined) {\n/*jshint globalstrict:true*/\n/*global angular:false*/\n'use strict';\n\nvar isDefined = angular.isDefined,\n    isFunction = angular.isFunction,\n    isString = angular.isString,\n    isObject = angular.isObject,\n    isArray = angular.isArray,\n    forEach = angular.forEach,\n    extend = angular.extend,\n    copy = angular.copy,\n    toJson = angular.toJson;\n\nfunction inherit(parent, extra) {\n  return extend(new (extend(function() {}, { prototype: parent }))(), extra);\n}\n\nfunction merge(dst) {\n  forEach(arguments, function(obj) {\n    if (obj !== dst) {\n      forEach(obj, function(value, key) {\n        if (!dst.hasOwnProperty(key)) dst[key] = value;\n      });\n    }\n  });\n  return dst;\n}\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nfunction ancestors(first, second) {\n  var path = [];\n\n  for (var n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * IE8-safe wrapper for `Object.keys()`.\n *\n * @param {Object} object A JavaScript object.\n * @return {Array} Returns the keys of the object as an array.\n */\nfunction objectKeys(object) {\n  if (Object.keys) {\n    return Object.keys(object);\n  }\n  var result = [];\n\n  forEach(object, function(val, key) {\n    result.push(key);\n  });\n  return result;\n}\n\n/**\n * IE8-safe wrapper for `Array.prototype.indexOf()`.\n *\n * @param {Array} array A JavaScript array.\n * @param {*} value A value to search the array for.\n * @return {Number} Returns the array index value of `value`, or `-1` if not present.\n */\nfunction indexOf(array, value) {\n  if (Array.prototype.indexOf) {\n    return array.indexOf(value, Number(arguments[2]) || 0);\n  }\n  var len = array.length >>> 0, from = Number(arguments[2]) || 0;\n  from = (from < 0) ? Math.ceil(from) : Math.floor(from);\n\n  if (from < 0) from += len;\n\n  for (; from < len; from++) {\n    if (from in array && array[from] === value) return from;\n  }\n  return -1;\n}\n\n/**\n * Merges a set of parameters with all parameters inherited between the common parents of the\n * current state and a given destination state.\n *\n * @param {Object} currentParams The value of the current state parameters ($stateParams).\n * @param {Object} newParams The set of parameters which will be composited with inherited params.\n * @param {Object} $current Internal definition of object representing the current state.\n * @param {Object} $to Internal definition of object representing state to transition to.\n */\nfunction inheritParams(currentParams, newParams, $current, $to) {\n  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\n  for (var i in parents) {\n    if (!parents[i] || !parents[i].params) continue;\n    parentParams = objectKeys(parents[i].params);\n    if (!parentParams.length) continue;\n\n    for (var j in parentParams) {\n      if (indexOf(inheritList, parentParams[j]) >= 0) continue;\n      inheritList.push(parentParams[j]);\n      inherited[parentParams[j]] = currentParams[parentParams[j]];\n    }\n  }\n  return extend({}, inherited, newParams);\n}\n\n/**\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n */\nfunction equalForKeys(a, b, keys) {\n  if (!keys) {\n    keys = [];\n    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility\n  }\n\n  for (var i=0; i<keys.length; i++) {\n    var k = keys[i];\n    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized\n  }\n  return true;\n}\n\n/**\n * Returns the subset of an object, based on a list of keys.\n *\n * @param {Array} keys\n * @param {Object} values\n * @return {Boolean} Returns a subset of `values`.\n */\nfunction filterByKeys(keys, values) {\n  var filtered = {};\n\n  forEach(keys, function (name) {\n    filtered[name] = values[name];\n  });\n  return filtered;\n}\n\n// like _.indexBy\n// when you know that your index values will be unique, or you want last-one-in to win\nfunction indexBy(array, propName) {\n  var result = {};\n  forEach(array, function(item) {\n    result[item[propName]] = item;\n  });\n  return result;\n}\n\n// extracted from underscore.js\n// Return a copy of the object only containing the whitelisted properties.\nfunction pick(obj) {\n  var copy = {};\n  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));\n  forEach(keys, function(key) {\n    if (key in obj) copy[key] = obj[key];\n  });\n  return copy;\n}\n\n// extracted from underscore.js\n// Return a copy of the object omitting the blacklisted properties.\nfunction omit(obj) {\n  var copy = {};\n  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));\n  for (var key in obj) {\n    if (indexOf(keys, key) == -1) copy[key] = obj[key];\n  }\n  return copy;\n}\n\nfunction pluck(collection, key) {\n  var result = isArray(collection) ? [] : {};\n\n  forEach(collection, function(val, i) {\n    result[i] = isFunction(key) ? key(val) : val[key];\n  });\n  return result;\n}\n\nfunction filter(collection, callback) {\n  var array = isArray(collection);\n  var result = array ? [] : {};\n  forEach(collection, function(val, i) {\n    if (callback(val, i)) {\n      result[array ? result.length : i] = val;\n    }\n  });\n  return result;\n}\n\nfunction map(collection, callback) {\n  var result = isArray(collection) ? [] : {};\n\n  forEach(collection, function(val, i) {\n    result[i] = callback(val, i);\n  });\n  return result;\n}\n\n/**\n * @ngdoc overview\n * @name ui.router.util\n *\n * @description\n * # ui.router.util sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n *\n */\nangular.module('ui.router.util', ['ng']);\n\n/**\n * @ngdoc overview\n * @name ui.router.router\n * \n * @requires ui.router.util\n *\n * @description\n * # ui.router.router sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n */\nangular.module('ui.router.router', ['ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router.state\n * \n * @requires ui.router.router\n * @requires ui.router.util\n *\n * @description\n * # ui.router.state sub-module\n *\n * This module is a dependency of the main ui.router module. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n * \n */\nangular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router\n *\n * @requires ui.router.state\n *\n * @description\n * # ui.router\n * \n * ## The main module for ui.router \n * There are several sub-modules included with the ui.router module, however only this module is needed\n * as a dependency within your angular app. The other modules are for organization purposes. \n *\n * The modules are:\n * * ui.router - the main \"umbrella\" module\n * * ui.router.router - \n * \n * *You'll need to include **only** this module as the dependency within your angular app.*\n * \n * <pre>\n * <!doctype html>\n * <html ng-app=\"myApp\">\n * <head>\n *   <script src=\"js/angular.js\"></script>\n *   <!-- Include the ui-router script -->\n *   <script src=\"js/angular-ui-router.min.js\"></script>\n *   <script>\n *     // ...and add 'ui.router' as a dependency\n *     var myApp = angular.module('myApp', ['ui.router']);\n *   </script>\n * </head>\n * <body>\n * </body>\n * </html>\n * </pre>\n */\nangular.module('ui.router', ['ui.router.state']);\n\nangular.module('ui.router.compat', ['ui.router']);\n\n/**\n * @ngdoc object\n * @name ui.router.util.$resolve\n *\n * @requires $q\n * @requires $injector\n *\n * @description\n * Manages resolution of (acyclic) graphs of promises.\n */\n$Resolve.$inject = ['$q', '$injector'];\nfunction $Resolve(  $q,    $injector) {\n  \n  var VISIT_IN_PROGRESS = 1,\n      VISIT_DONE = 2,\n      NOTHING = {},\n      NO_DEPENDENCIES = [],\n      NO_LOCALS = NOTHING,\n      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });\n  \n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$resolve#study\n   * @methodOf ui.router.util.$resolve\n   *\n   * @description\n   * Studies a set of invocables that are likely to be used multiple times.\n   * <pre>\n   * $resolve.study(invocables)(locals, parent, self)\n   * </pre>\n   * is equivalent to\n   * <pre>\n   * $resolve.resolve(invocables, locals, parent, self)\n   * </pre>\n   * but the former is more efficient (in fact `resolve` just calls `study` \n   * internally).\n   *\n   * @param {object} invocables Invocable objects\n   * @return {function} a function to pass in locals, parent and self\n   */\n  this.study = function (invocables) {\n    if (!isObject(invocables)) throw new Error(\"'invocables' must be an object\");\n    var invocableKeys = objectKeys(invocables || {});\n    \n    // Perform a topological sort of invocables to build an ordered plan\n    var plan = [], cycle = [], visited = {};\n    function visit(value, key) {\n      if (visited[key] === VISIT_DONE) return;\n      \n      cycle.push(key);\n      if (visited[key] === VISIT_IN_PROGRESS) {\n        cycle.splice(0, indexOf(cycle, key));\n        throw new Error(\"Cyclic dependency: \" + cycle.join(\" -> \"));\n      }\n      visited[key] = VISIT_IN_PROGRESS;\n      \n      if (isString(value)) {\n        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);\n      } else {\n        var params = $injector.annotate(value);\n        forEach(params, function (param) {\n          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);\n        });\n        plan.push(key, value, params);\n      }\n      \n      cycle.pop();\n      visited[key] = VISIT_DONE;\n    }\n    forEach(invocables, visit);\n    invocables = cycle = visited = null; // plan is all that's required\n    \n    function isResolve(value) {\n      return isObject(value) && value.then && value.$$promises;\n    }\n    \n    return function (locals, parent, self) {\n      if (isResolve(locals) && self === undefined) {\n        self = parent; parent = locals; locals = null;\n      }\n      if (!locals) locals = NO_LOCALS;\n      else if (!isObject(locals)) {\n        throw new Error(\"'locals' must be an object\");\n      }       \n      if (!parent) parent = NO_PARENT;\n      else if (!isResolve(parent)) {\n        throw new Error(\"'parent' must be a promise returned by $resolve.resolve()\");\n      }\n      \n      // To complete the overall resolution, we have to wait for the parent\n      // promise and for the promise for each invokable in our plan.\n      var resolution = $q.defer(),\n          result = resolution.promise,\n          promises = result.$$promises = {},\n          values = extend({}, locals),\n          wait = 1 + plan.length/3,\n          merged = false;\n          \n      function done() {\n        // Merge parent values we haven't got yet and publish our own $$values\n        if (!--wait) {\n          if (!merged) merge(values, parent.$$values); \n          result.$$values = values;\n          result.$$promises = result.$$promises || true; // keep for isResolve()\n          delete result.$$inheritedValues;\n          resolution.resolve(values);\n        }\n      }\n      \n      function fail(reason) {\n        result.$$failure = reason;\n        resolution.reject(reason);\n      }\n\n      // Short-circuit if parent has already failed\n      if (isDefined(parent.$$failure)) {\n        fail(parent.$$failure);\n        return result;\n      }\n      \n      if (parent.$$inheritedValues) {\n        merge(values, omit(parent.$$inheritedValues, invocableKeys));\n      }\n\n      // Merge parent values if the parent has already resolved, or merge\n      // parent promises and wait if the parent resolve is still in progress.\n      extend(promises, parent.$$promises);\n      if (parent.$$values) {\n        merged = merge(values, omit(parent.$$values, invocableKeys));\n        result.$$inheritedValues = omit(parent.$$values, invocableKeys);\n        done();\n      } else {\n        if (parent.$$inheritedValues) {\n          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);\n        }        \n        parent.then(done, fail);\n      }\n      \n      // Process each invocable in the plan, but ignore any where a local of the same name exists.\n      for (var i=0, ii=plan.length; i<ii; i+=3) {\n        if (locals.hasOwnProperty(plan[i])) done();\n        else invoke(plan[i], plan[i+1], plan[i+2]);\n      }\n      \n      function invoke(key, invocable, params) {\n        // Create a deferred for this invocation. Failures will propagate to the resolution as well.\n        var invocation = $q.defer(), waitParams = 0;\n        function onfailure(reason) {\n          invocation.reject(reason);\n          fail(reason);\n        }\n        // Wait for any parameter that we have a promise for (either from parent or from this\n        // resolve; in that case study() will have made sure it's ordered before us in the plan).\n        forEach(params, function (dep) {\n          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {\n            waitParams++;\n            promises[dep].then(function (result) {\n              values[dep] = result;\n              if (!(--waitParams)) proceed();\n            }, onfailure);\n          }\n        });\n        if (!waitParams) proceed();\n        function proceed() {\n          if (isDefined(result.$$failure)) return;\n          try {\n            invocation.resolve($injector.invoke(invocable, self, values));\n            invocation.promise.then(function (result) {\n              values[key] = result;\n              done();\n            }, onfailure);\n          } catch (e) {\n            onfailure(e);\n          }\n        }\n        // Publish promise synchronously; invocations further down in the plan may depend on it.\n        promises[key] = invocation.promise;\n      }\n      \n      return result;\n    };\n  };\n  \n  /**\n   * @ngdoc function\n   * @name ui.router.util.$resolve#resolve\n   * @methodOf ui.router.util.$resolve\n   *\n   * @description\n   * Resolves a set of invocables. An invocable is a function to be invoked via \n   * `$injector.invoke()`, and can have an arbitrary number of dependencies. \n   * An invocable can either return a value directly,\n   * or a `$q` promise. If a promise is returned it will be resolved and the \n   * resulting value will be used instead. Dependencies of invocables are resolved \n   * (in this order of precedence)\n   *\n   * - from the specified `locals`\n   * - from another invocable that is part of this `$resolve` call\n   * - from an invocable that is inherited from a `parent` call to `$resolve` \n   *   (or recursively\n   * - from any ancestor `$resolve` of that parent).\n   *\n   * The return value of `$resolve` is a promise for an object that contains \n   * (in this order of precedence)\n   *\n   * - any `locals` (if specified)\n   * - the resolved return values of all injectables\n   * - any values inherited from a `parent` call to `$resolve` (if specified)\n   *\n   * The promise will resolve after the `parent` promise (if any) and all promises \n   * returned by injectables have been resolved. If any invocable \n   * (or `$injector.invoke`) throws an exception, or if a promise returned by an \n   * invocable is rejected, the `$resolve` promise is immediately rejected with the \n   * same error. A rejection of a `parent` promise (if specified) will likewise be \n   * propagated immediately. Once the `$resolve` promise has been rejected, no \n   * further invocables will be called.\n   * \n   * Cyclic dependencies between invocables are not permitted and will cause `$resolve`\n   * to throw an error. As a special case, an injectable can depend on a parameter \n   * with the same name as the injectable, which will be fulfilled from the `parent` \n   * injectable of the same name. This allows inherited values to be decorated. \n   * Note that in this case any other injectable in the same `$resolve` with the same\n   * dependency would see the decorated value, not the inherited value.\n   *\n   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an \n   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) \n   * exception.\n   *\n   * Invocables are invoked eagerly as soon as all dependencies are available. \n   * This is true even for dependencies inherited from a `parent` call to `$resolve`.\n   *\n   * As a special case, an invocable can be a string, in which case it is taken to \n   * be a service name to be passed to `$injector.get()`. This is supported primarily \n   * for backwards-compatibility with the `resolve` property of `$routeProvider` \n   * routes.\n   *\n   * @param {object} invocables functions to invoke or \n   * `$injector` services to fetch.\n   * @param {object} locals  values to make available to the injectables\n   * @param {object} parent  a promise returned by another call to `$resolve`.\n   * @param {object} self  the `this` for the invoked methods\n   * @return {object} Promise for an object that contains the resolved return value\n   * of all invocables, as well as any inherited and local values.\n   */\n  this.resolve = function (invocables, locals, parent, self) {\n    return this.study(invocables)(locals, parent, self);\n  };\n}\n\nangular.module('ui.router.util').service('$resolve', $Resolve);\n\n\n/**\n * @ngdoc object\n * @name ui.router.util.$templateFactory\n *\n * @requires $http\n * @requires $templateCache\n * @requires $injector\n *\n * @description\n * Service. Manages loading of templates.\n */\n$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];\nfunction $TemplateFactory(  $http,   $templateCache,   $injector) {\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromConfig\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template from a configuration object. \n   *\n   * @param {object} config Configuration object for which to load a template. \n   * The following properties are search in the specified order, and the first one \n   * that is defined is used to create the template:\n   *\n   * @param {string|object} config.template html string template or function to \n   * load via {@link ui.router.util.$templateFactory#fromString fromString}.\n   * @param {string|object} config.templateUrl url to load or a function returning \n   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.\n   * @param {Function} config.templateProvider function to invoke via \n   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.\n   * @param {object} params  Parameters to pass to the template function.\n   * @param {object} locals Locals to pass to `invoke` if the template is loaded \n   * via a `templateProvider`. Defaults to `{ params: params }`.\n   *\n   * @return {string|object}  The template html as a string, or a promise for \n   * that string,or `null` if no template is configured.\n   */\n  this.fromConfig = function (config, params, locals) {\n    return (\n      isDefined(config.template) ? this.fromString(config.template, params) :\n      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :\n      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :\n      null\n    );\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromString\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template from a string or a function returning a string.\n   *\n   * @param {string|object} template html template as a string or function that \n   * returns an html template as a string.\n   * @param {object} params Parameters to pass to the template function.\n   *\n   * @return {string|object} The template html as a string, or a promise for that \n   * string.\n   */\n  this.fromString = function (template, params) {\n    return isFunction(template) ? template(params) : template;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromUrl\n   * @methodOf ui.router.util.$templateFactory\n   * \n   * @description\n   * Loads a template from the a URL via `$http` and `$templateCache`.\n   *\n   * @param {string|Function} url url of the template to load, or a function \n   * that returns a url.\n   * @param {Object} params Parameters to pass to the url function.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  this.fromUrl = function (url, params) {\n    if (isFunction(url)) url = url(params);\n    if (url == null) return null;\n    else return $http\n        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})\n        .then(function(response) { return response.data; });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromProvider\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template by invoking an injectable provider function.\n   *\n   * @param {Function} provider Function to invoke via `$injector.invoke`\n   * @param {Object} params Parameters for the template.\n   * @param {Object} locals Locals to pass to `invoke`. Defaults to \n   * `{ params: params }`.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  this.fromProvider = function (provider, params, locals) {\n    return $injector.invoke(provider, null, locals || { params: params });\n  };\n}\n\nangular.module('ui.router.util').service('$templateFactory', $TemplateFactory);\n\nvar $$UMFP; // reference to $UrlMatcherFactoryProvider\n\n/**\n * @ngdoc object\n * @name ui.router.util.type:UrlMatcher\n *\n * @description\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list\n * of search parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.\n *\n * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace\n * syntax, which optionally allows a regular expression for the parameter to be specified:\n *\n * * `':'` name - colon placeholder\n * * `'*'` name - catch-all placeholder\n * * `'{' name '}'` - curly placeholder\n * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the\n *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters). For colon\n * placeholders or curly placeholders without an explicit regexp, a path parameter matches any\n * number of characters other than '/'. For catch-all placeholders the path parameter matches\n * any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n * @param {string} pattern  The pattern to compile into a matcher.\n * @param {Object} config  A configuration object hash:\n * @param {Object=} parentMatcher Used to concatenate the pattern/config onto\n *   an existing UrlMatcher\n *\n * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n *\n * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any\n *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n *   non-null) will start with this prefix.\n *\n * @property {string} source  The pattern that was passed into the constructor\n *\n * @property {string} sourcePath  The path portion of the source property\n *\n * @property {string} sourceSearch  The search portion of the source property\n *\n * @property {string} regex  The constructed regex that will be used to match against the url when\n *   it is time to determine which url will match.\n *\n * @returns {Object}  New `UrlMatcher` object\n */\nfunction UrlMatcher(pattern, config, parentMatcher) {\n  config = extend({ params: {} }, isObject(config) ? config : {});\n\n  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n  //   '*' name\n  //   ':' name\n  //   '{' name '}'\n  //   '{' name ':' regexp '}'\n  // The regular expression is somewhat complicated due to the need to allow curly braces\n  // inside the regular expression. The placeholder regexp breaks down as follows:\n  //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n  //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n  //    [^{}\\\\]+                       - anything other than curly braces or backslash\n  //    \\\\.                            - a backslash escape\n  //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n  var placeholder       = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n      searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n      compiled = '^', last = 0, m,\n      segments = this.segments = [],\n      parentParams = parentMatcher ? parentMatcher.params : {},\n      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),\n      paramNames = [];\n\n  function addParameter(id, type, config, location) {\n    paramNames.push(id);\n    if (parentParams[id]) return parentParams[id];\n    if (!/^\\w+([-.]+\\w+)*(?:\\[\\])?$/.test(id)) throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n    if (params[id]) throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n    params[id] = new $$UMFP.Param(id, type, config, location);\n    return params[id];\n  }\n\n  function quoteRegExp(string, pattern, squash, optional) {\n    var surroundPattern = ['',''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n    if (!pattern) return result;\n    switch(squash) {\n      case false: surroundPattern = ['(', ')' + (optional ? \"?\" : \"\")]; break;\n      case true:\n        result = result.replace(/\\/$/, '');\n        surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n      default:    surroundPattern = ['(' + squash + \"|\", ')?']; break;\n    }\n    return result + surroundPattern[0] + pattern + surroundPattern[1];\n  }\n\n  this.source = pattern;\n\n  // Split into static segments separated by path parameter placeholders.\n  // The number of segments is always 1 more than the number of parameters.\n  function matchDetails(m, isSearch) {\n    var id, regexp, segment, type, cfg, arrayMode;\n    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null\n    cfg         = config.params[id];\n    segment     = pattern.substring(last, m.index);\n    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);\n\n    if (regexp) {\n      type      = $$UMFP.type(regexp) || inherit($$UMFP.type(\"string\"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });\n    }\n\n    return {\n      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg\n    };\n  }\n\n  var p, param, segment;\n  while ((m = placeholder.exec(pattern))) {\n    p = matchDetails(m, false);\n    if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n    param = addParameter(p.id, p.type, p.cfg, \"path\");\n    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);\n    segments.push(p.segment);\n    last = placeholder.lastIndex;\n  }\n  segment = pattern.substring(last);\n\n  // Find any search parameter names and remove them from the last segment\n  var i = segment.indexOf('?');\n\n  if (i >= 0) {\n    var search = this.sourceSearch = segment.substring(i);\n    segment = segment.substring(0, i);\n    this.sourcePath = pattern.substring(0, last + i);\n\n    if (search.length > 0) {\n      last = 0;\n      while ((m = searchPlaceholder.exec(search))) {\n        p = matchDetails(m, true);\n        param = addParameter(p.id, p.type, p.cfg, \"search\");\n        last = placeholder.lastIndex;\n        // check if ?&\n      }\n    }\n  } else {\n    this.sourcePath = pattern;\n    this.sourceSearch = '';\n  }\n\n  compiled += quoteRegExp(segment) + (config.strict === false ? '\\/?' : '') + '$';\n  segments.push(segment);\n\n  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);\n  this.prefix = segments[0];\n  this.$$paramNames = paramNames;\n}\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#concat\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Returns a new matcher for a pattern constructed by appending the path part and adding the\n * search parameters of the specified pattern to this pattern. The current pattern is not\n * modified. This can be understood as creating a pattern for URLs that are relative to (or\n * suffixes of) the current pattern.\n *\n * @example\n * The following two matchers are equivalent:\n * <pre>\n * new UrlMatcher('/user/{id}?q').concat('/details?date');\n * new UrlMatcher('/user/{id}/details?q&date');\n * </pre>\n *\n * @param {string} pattern  The pattern to append.\n * @param {Object} config  An object hash of the configuration for the matcher.\n * @returns {UrlMatcher}  A matcher for the concatenated pattern.\n */\nUrlMatcher.prototype.concat = function (pattern, config) {\n  // Because order of search parameters is irrelevant, we can add our own search\n  // parameters to the end of the new pattern. Parse the new pattern by itself\n  // and then join the bits together, but it's much easier to do this on a string level.\n  var defaultConfig = {\n    caseInsensitive: $$UMFP.caseInsensitive(),\n    strict: $$UMFP.strictMode(),\n    squash: $$UMFP.defaultSquashPolicy()\n  };\n  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);\n};\n\nUrlMatcher.prototype.toString = function () {\n  return this.source;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#exec\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Tests the specified path against this matcher, and returns an object containing the captured\n * parameter values, or null if the path does not match. The returned object contains the values\n * of any search parameters that are mentioned in the pattern, but their value may be null if\n * they are not present in `searchParams`. This means that search parameters are always treated\n * as optional.\n *\n * @example\n * <pre>\n * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n *   x: '1', q: 'hello'\n * });\n * // returns { id: 'bob', q: 'hello', r: null }\n * </pre>\n *\n * @param {string} path  The URL path to match, e.g. `$location.path()`.\n * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.\n * @returns {Object}  The captured parameter values.\n */\nUrlMatcher.prototype.exec = function (path, searchParams) {\n  var m = this.regexp.exec(path);\n  if (!m) return null;\n  searchParams = searchParams || {};\n\n  var paramNames = this.parameters(), nTotal = paramNames.length,\n    nPath = this.segments.length - 1,\n    values = {}, i, j, cfg, paramName;\n\n  if (nPath !== m.length - 1) throw new Error(\"Unbalanced capture group in route '\" + this.source + \"'\");\n\n  function decodePathArray(string) {\n    function reverseString(str) { return str.split(\"\").reverse().join(\"\"); }\n    function unquoteDashes(str) { return str.replace(/\\\\-/g, \"-\"); }\n\n    var split = reverseString(string).split(/-(?!\\\\)/);\n    var allReversed = map(split, reverseString);\n    return map(allReversed, unquoteDashes).reverse();\n  }\n\n  var param, paramVal;\n  for (i = 0; i < nPath; i++) {\n    paramName = paramNames[i];\n    param = this.params[paramName];\n    paramVal = m[i+1];\n    // if the param value matches a pre-replace pair, replace the value before decoding.\n    for (j = 0; j < param.replace.length; j++) {\n      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;\n    }\n    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);\n    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);\n    values[paramName] = param.value(paramVal);\n  }\n  for (/**/; i < nTotal; i++) {\n    paramName = paramNames[i];\n    values[paramName] = this.params[paramName].value(searchParams[paramName]);\n    param = this.params[paramName];\n    paramVal = searchParams[paramName];\n    for (j = 0; j < param.replace.length; j++) {\n      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;\n    }\n    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);\n    values[paramName] = param.value(paramVal);\n  }\n\n  return values;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#parameters\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Returns the names of all path and search parameters of this pattern in an unspecified order.\n *\n * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the\n *    pattern has no parameters, an empty array is returned.\n */\nUrlMatcher.prototype.parameters = function (param) {\n  if (!isDefined(param)) return this.$$paramNames;\n  return this.params[param] || null;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#validates\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Checks an object hash of parameters to validate their correctness according to the parameter\n * types of this `UrlMatcher`.\n *\n * @param {Object} params The object hash of parameters to validate.\n * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.\n */\nUrlMatcher.prototype.validates = function (params) {\n  return this.params.$$validates(params);\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#format\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Creates a URL that matches this pattern by substituting the specified values\n * for the path and search parameters. Null values for path parameters are\n * treated as empty strings.\n *\n * @example\n * <pre>\n * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n * // returns '/user/bob?q=yes'\n * </pre>\n *\n * @param {Object} values  the values to substitute for the parameters in this pattern.\n * @returns {string}  the formatted URL (path and optionally search part).\n */\nUrlMatcher.prototype.format = function (values) {\n  values = values || {};\n  var segments = this.segments, params = this.parameters(), paramset = this.params;\n  if (!this.validates(values)) return null;\n\n  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];\n\n  function encodeDashes(str) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });\n  }\n\n  for (i = 0; i < nTotal; i++) {\n    var isPathParam = i < nPath;\n    var name = params[i], param = paramset[name], value = param.value(values[name]);\n    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);\n    var squash = isDefaultValue ? param.squash : false;\n    var encoded = param.type.encode(value);\n\n    if (isPathParam) {\n      var nextSegment = segments[i + 1];\n      var isFinalPathParam = i + 1 === nPath;\n\n      if (squash === false) {\n        if (encoded != null) {\n          if (isArray(encoded)) {\n            result += map(encoded, encodeDashes).join(\"-\");\n          } else {\n            result += encodeURIComponent(encoded);\n          }\n        }\n        result += nextSegment;\n      } else if (squash === true) {\n        var capture = result.match(/\\/$/) ? /\\/?(.*)/ : /(.*)/;\n        result += nextSegment.match(capture)[1];\n      } else if (isString(squash)) {\n        result += squash + nextSegment;\n      }\n\n      if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);\n    } else {\n      if (encoded == null || (isDefaultValue && squash !== false)) continue;\n      if (!isArray(encoded)) encoded = [ encoded ];\n      if (encoded.length === 0) continue;\n      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');\n      result += (search ? '&' : '?') + (name + '=' + encoded);\n      search = true;\n    }\n  }\n\n  return result;\n};\n\n/**\n * @ngdoc object\n * @name ui.router.util.type:Type\n *\n * @description\n * Implements an interface to define custom parameter types that can be decoded from and encoded to\n * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}\n * objects when matching or formatting URLs, or comparing or validating parameter values.\n *\n * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more\n * information on registering custom types.\n *\n * @param {Object} config  A configuration object which contains the custom type definition.  The object's\n *        properties will override the default methods and/or pattern in `Type`'s public interface.\n * @example\n * <pre>\n * {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * </pre>\n *\n * @property {RegExp} pattern The regular expression pattern used to match values of this type when\n *           coming from a substring of a URL.\n *\n * @returns {Object}  Returns a new `Type` object.\n */\nfunction Type(config) {\n  extend(this, config);\n}\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#is\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Detects whether a value is of a particular type. Accepts a native (decoded) value\n * and determines whether it matches the current `Type` object.\n *\n * @param {*} val  The value to check.\n * @param {string} key  Optional. If the type check is happening in the context of a specific\n *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the\n *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.\n * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.\n */\nType.prototype.is = function(val, key) {\n  return true;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#encode\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the\n * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it\n * only needs to be a representation of `val` that has been coerced to a string.\n *\n * @param {*} val  The value to encode.\n * @param {string} key  The name of the parameter in which `val` is stored. Can be used for\n *        meta-programming of `Type` objects.\n * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.\n */\nType.prototype.encode = function(val, key) {\n  return val;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#decode\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Converts a parameter value (from URL string or transition param) to a custom/native value.\n *\n * @param {string} val  The URL parameter value to decode.\n * @param {string} key  The name of the parameter in which `val` is stored. Can be used for\n *        meta-programming of `Type` objects.\n * @returns {*}  Returns a custom representation of the URL parameter value.\n */\nType.prototype.decode = function(val, key) {\n  return val;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#equals\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Determines whether two decoded values are equivalent.\n *\n * @param {*} a  A value to compare against.\n * @param {*} b  A value to compare against.\n * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.\n */\nType.prototype.equals = function(a, b) {\n  return a == b;\n};\n\nType.prototype.$subPattern = function() {\n  var sub = this.pattern.toString();\n  return sub.substr(1, sub.length - 2);\n};\n\nType.prototype.pattern = /.*/;\n\nType.prototype.toString = function() { return \"{Type:\" + this.name + \"}\"; };\n\n/** Given an encoded string, or a decoded object, returns a decoded object */\nType.prototype.$normalize = function(val) {\n  return this.is(val) ? val : this.decode(val);\n};\n\n/*\n * Wraps an existing custom Type as an array of Type, depending on 'mode'.\n * e.g.:\n * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n * - url: \"/path?queryParam=1&queryParam=2\n * - $stateParams.queryParam will be [1, 2]\n * if `mode` is \"auto\", then\n * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n */\nType.prototype.$asArray = function(mode, isSearch) {\n  if (!mode) return this;\n  if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n\n  function ArrayType(type, mode) {\n    function bindTo(type, callbackName) {\n      return function() {\n        return type[callbackName].apply(type, arguments);\n      };\n    }\n\n    // Wrap non-array value as array\n    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }\n    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n    function arrayUnwrap(val) {\n      switch(val.length) {\n        case 0: return undefined;\n        case 1: return mode === \"auto\" ? val[0] : val;\n        default: return val;\n      }\n    }\n    function falsey(val) { return !val; }\n\n    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n    function arrayHandler(callback, allTruthyMode) {\n      return function handleArray(val) {\n        if (isArray(val) && val.length === 0) return val;\n        val = arrayWrap(val);\n        var result = map(val, callback);\n        if (allTruthyMode === true)\n          return filter(result, falsey).length === 0;\n        return arrayUnwrap(result);\n      };\n    }\n\n    // Wraps type (.equals) functions to operate on each value of an array\n    function arrayEqualsHandler(callback) {\n      return function handleArray(val1, val2) {\n        var left = arrayWrap(val1), right = arrayWrap(val2);\n        if (left.length !== right.length) return false;\n        for (var i = 0; i < left.length; i++) {\n          if (!callback(left[i], right[i])) return false;\n        }\n        return true;\n      };\n    }\n\n    this.encode = arrayHandler(bindTo(type, 'encode'));\n    this.decode = arrayHandler(bindTo(type, 'decode'));\n    this.is     = arrayHandler(bindTo(type, 'is'), true);\n    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));\n    this.pattern = type.pattern;\n    this.$normalize = arrayHandler(bindTo(type, '$normalize'));\n    this.name = type.name;\n    this.$arrayMode = mode;\n  }\n\n  return new ArrayType(this, mode);\n};\n\n\n\n/**\n * @ngdoc object\n * @name ui.router.util.$urlMatcherFactory\n *\n * @description\n * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory\n * is also available to providers under the name `$urlMatcherFactoryProvider`.\n */\nfunction $UrlMatcherFactory() {\n  $$UMFP = this;\n\n  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;\n\n  // Use tildes to pre-encode slashes.\n  // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n  // and bidirectional encoding/decoding fails.\n  // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\n  function valToString(val) { return val != null ? val.toString().replace(/~/g, \"~~\").replace(/\\//g, \"~2F\") : val; }\n  function valFromString(val) { return val != null ? val.toString().replace(/~2F/g, \"/\").replace(/~~/g, \"~\") : val; }\n\n  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {\n    \"string\": {\n      encode: valToString,\n      decode: valFromString,\n      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.\n      // In 0.2.x, string params are optional by default for backwards compat\n      is: function(val) { return val == null || !isDefined(val) || typeof val === \"string\"; },\n      pattern: /[^/]*/\n    },\n    \"int\": {\n      encode: valToString,\n      decode: function(val) { return parseInt(val, 10); },\n      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },\n      pattern: /\\d+/\n    },\n    \"bool\": {\n      encode: function(val) { return val ? 1 : 0; },\n      decode: function(val) { return parseInt(val, 10) !== 0; },\n      is: function(val) { return val === true || val === false; },\n      pattern: /0|1/\n    },\n    \"date\": {\n      encode: function (val) {\n        if (!this.is(val))\n          return undefined;\n        return [ val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode: function (val) {\n        if (this.is(val)) return val;\n        var match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },\n      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    },\n    \"json\": {\n      encode: angular.toJson,\n      decode: angular.fromJson,\n      is: angular.isObject,\n      equals: angular.equals,\n      pattern: /[^/]*/\n    },\n    \"any\": { // does not encode/decode\n      encode: angular.identity,\n      decode: angular.identity,\n      equals: angular.equals,\n      pattern: /.*/\n    }\n  };\n\n  function getDefaultConfig() {\n    return {\n      strict: isStrictMode,\n      caseInsensitive: isCaseInsensitive\n    };\n  }\n\n  function isInjectable(value) {\n    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));\n  }\n\n  /**\n   * [Internal] Get the default value of a parameter, which may be an injectable function.\n   */\n  $UrlMatcherFactory.$$getDefaultValue = function(config) {\n    if (!isInjectable(config.value)) return config.value;\n    if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n    return injector.invoke(config.value);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#caseInsensitive\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns {boolean} the current value of caseInsensitive\n   */\n  this.caseInsensitive = function(value) {\n    if (isDefined(value))\n      isCaseInsensitive = value;\n    return isCaseInsensitive;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#strictMode\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns {boolean} the current value of strictMode\n   */\n  this.strictMode = function(value) {\n    if (isDefined(value))\n      isStrictMode = value;\n    return isStrictMode;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * @param {string} value A string that defines the default parameter URL squashing behavior.\n   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *             the parameter value from the URL and replace it with this string.\n   */\n  this.defaultSquashPolicy = function(value) {\n    if (!isDefined(value)) return defaultSquashPolicy;\n    if (value !== true && value !== false && !isString(value))\n      throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n    defaultSquashPolicy = value;\n    return value;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#compile\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.\n   *\n   * @param {string} pattern  The URL pattern.\n   * @param {Object} config  The config object hash.\n   * @returns {UrlMatcher}  The UrlMatcher.\n   */\n  this.compile = function (pattern, config) {\n    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#isMatcher\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.\n   *\n   * @param {Object} object  The object to perform the type check against.\n   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  this.isMatcher = function (o) {\n    if (!isObject(o)) return false;\n    var result = true;\n\n    forEach(UrlMatcher.prototype, function(val, name) {\n      if (isFunction(val)) {\n        result = result && (isDefined(o[name]) && isFunction(o[name]));\n      }\n    });\n    return result;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#type\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to\n   * generate URLs with typed parameters.\n   *\n   * @param {string} name  The type name.\n   * @param {Object|Function} definition   The type definition. See\n   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.\n   * @param {Object|Function} definitionFn (optional) A function that is injected before the app\n   *        runtime starts.  The result of this function is merged into the existing `definition`.\n   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.\n   *\n   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.\n   *\n   * @example\n   * This is a simple example of a custom type that encodes and decodes items from an\n   * array, using the array index as the URL-encoded value:\n   *\n   * <pre>\n   * var list = ['John', 'Paul', 'George', 'Ringo'];\n   *\n   * $urlMatcherFactoryProvider.type('listItem', {\n   *   encode: function(item) {\n   *     // Represent the list item in the URL using its corresponding index\n   *     return list.indexOf(item);\n   *   },\n   *   decode: function(item) {\n   *     // Look up the list item by index\n   *     return list[parseInt(item, 10)];\n   *   },\n   *   is: function(item) {\n   *     // Ensure the item is valid by checking to see that it appears\n   *     // in the list\n   *     return list.indexOf(item) > -1;\n   *   }\n   * });\n   *\n   * $stateProvider.state('list', {\n   *   url: \"/list/{item:listItem}\",\n   *   controller: function($scope, $stateParams) {\n   *     console.log($stateParams.item);\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * // Changes URL to '/list/3', logs \"Ringo\" to the console\n   * $state.go('list', { item: \"Ringo\" });\n   * </pre>\n   *\n   * This is a more complex example of a type that relies on dependency injection to\n   * interact with services, and uses the parameter name from the URL to infer how to\n   * handle encoding and decoding parameter values:\n   *\n   * <pre>\n   * // Defines a custom type that gets a value from a service,\n   * // where each service gets different types of values from\n   * // a backend API:\n   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {\n   *\n   *   // Matches up services to URL parameter names\n   *   var services = {\n   *     user: Users,\n   *     post: Posts\n   *   };\n   *\n   *   return {\n   *     encode: function(object) {\n   *       // Represent the object in the URL using its unique ID\n   *       return object.id;\n   *     },\n   *     decode: function(value, key) {\n   *       // Look up the object by ID, using the parameter\n   *       // name (key) to call the correct service\n   *       return services[key].findById(value);\n   *     },\n   *     is: function(object, key) {\n   *       // Check that object is a valid dbObject\n   *       return angular.isObject(object) && object.id && services[key];\n   *     }\n   *     equals: function(a, b) {\n   *       // Check the equality of decoded objects by comparing\n   *       // their unique IDs\n   *       return a.id === b.id;\n   *     }\n   *   };\n   * });\n   *\n   * // In a config() block, you can then attach URLs with\n   * // type-annotated parameters:\n   * $stateProvider.state('users', {\n   *   url: \"/users\",\n   *   // ...\n   * }).state('users.item', {\n   *   url: \"/{user:dbObject}\",\n   *   controller: function($scope, $stateParams) {\n   *     // $stateParams.user will now be an object returned from\n   *     // the Users service\n   *   },\n   *   // ...\n   * });\n   * </pre>\n   */\n  this.type = function (name, definition, definitionFn) {\n    if (!isDefined(definition)) return $types[name];\n    if ($types.hasOwnProperty(name)) throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n\n    $types[name] = new Type(extend({ name: name }, definition));\n    if (definitionFn) {\n      typeQueue.push({ name: name, def: definitionFn });\n      if (!enqueue) flushTypeQueue();\n    }\n    return this;\n  };\n\n  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s\n  function flushTypeQueue() {\n    while(typeQueue.length) {\n      var type = typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      angular.extend($types[type.name], injector.invoke(type.def));\n    }\n  }\n\n  // Register default types. Store them in the prototype of $types.\n  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });\n  $types = inherit($types, {});\n\n  /* No need to document $get, since it returns this */\n  this.$get = ['$injector', function ($injector) {\n    injector = $injector;\n    enqueue = false;\n    flushTypeQueue();\n\n    forEach(defaultTypes, function(type, name) {\n      if (!$types[name]) $types[name] = new Type(type);\n    });\n    return this;\n  }];\n\n  this.Param = function Param(id, type, config, location) {\n    var self = this;\n    config = unwrapShorthand(config);\n    type = getType(config, type, location);\n    var arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === \"search\") : type;\n    if (type.name === \"string\" && !arrayMode && location === \"path\" && config.value === undefined)\n      config.value = \"\"; // for 0.2.x; in 0.3.0+ do not automatically default to \"\"\n    var isOptional = config.value !== undefined;\n    var squash = getSquashPolicy(config, isOptional);\n    var replace = getReplace(config, arrayMode, isOptional, squash);\n\n    function unwrapShorthand(config) {\n      var keys = isObject(config) ? objectKeys(config) : [];\n      var isShorthand = indexOf(keys, \"value\") === -1 && indexOf(keys, \"type\") === -1 &&\n                        indexOf(keys, \"squash\") === -1 && indexOf(keys, \"array\") === -1;\n      if (isShorthand) config = { value: config };\n      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };\n      return config;\n    }\n\n    function getType(config, urlType, location) {\n      if (config.type && urlType) throw new Error(\"Param '\"+id+\"' has two type configurations.\");\n      if (urlType) return urlType;\n      if (!config.type) return (location === \"config\" ? $types.any : $types.string);\n\n      if (angular.isString(config.type))\n        return $types[config.type];\n      if (config.type instanceof Type)\n        return config.type;\n      return new Type(config.type);\n    }\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      var arrayDefaults = { array: (location === \"search\" ? \"auto\" : false) };\n      var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    /**\n     * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n     */\n    function getSquashPolicy(config, isOptional) {\n      var squash = config.squash;\n      if (!isOptional || squash === false) return false;\n      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;\n      if (squash === true || isString(squash)) return squash;\n      throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n    }\n\n    function getReplace(config, arrayMode, isOptional, squash) {\n      var replace, configuredKeys, defaultPolicy = [\n        { from: \"\",   to: (isOptional || arrayMode ? undefined : \"\") },\n        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\n      ];\n      replace = isArray(config.replace) ? config.replace : [];\n      if (isString(squash))\n        replace.push({ from: squash, to: undefined });\n      configuredKeys = map(replace, function(item) { return item.from; } );\n      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);\n    }\n\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    function $$getDefaultValue() {\n      if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n      var defaultValue = injector.invoke(config.$$fn);\n      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))\n        throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + self.id + \"' is not an instance of Type (\" + self.type.name + \")\");\n      return defaultValue;\n    }\n\n    /**\n     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n     * default value, which may be the result of an injectable function.\n     */\n    function $value(value) {\n      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }\n      function $replace(value) {\n        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });\n        return replacement.length ? replacement[0] : value;\n      }\n      value = $replace(value);\n      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);\n    }\n\n    function toString() { return \"{Param:\" + id + \" \" + type + \" squash: '\" + squash + \"' optional: \" + isOptional + \"}\"; }\n\n    extend(this, {\n      id: id,\n      type: type,\n      location: location,\n      array: arrayMode,\n      squash: squash,\n      replace: replace,\n      isOptional: isOptional,\n      value: $value,\n      dynamic: undefined,\n      config: config,\n      toString: toString\n    });\n  };\n\n  function ParamSet(params) {\n    extend(this, params || {});\n  }\n\n  ParamSet.prototype = {\n    $$new: function() {\n      return inherit(this, extend(new ParamSet(), { $$parent: this}));\n    },\n    $$keys: function () {\n      var keys = [], chain = [], parent = this,\n        ignore = objectKeys(ParamSet.prototype);\n      while (parent) { chain.push(parent); parent = parent.$$parent; }\n      chain.reverse();\n      forEach(chain, function(paramset) {\n        forEach(objectKeys(paramset), function(key) {\n            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);\n        });\n      });\n      return keys;\n    },\n    $$values: function(paramValues) {\n      var values = {}, self = this;\n      forEach(self.$$keys(), function(key) {\n        values[key] = self[key].value(paramValues && paramValues[key]);\n      });\n      return values;\n    },\n    $$equals: function(paramValues1, paramValues2) {\n      var equal = true, self = this;\n      forEach(self.$$keys(), function(key) {\n        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];\n        if (!self[key].type.equals(left, right)) equal = false;\n      });\n      return equal;\n    },\n    $$validates: function $$validate(paramValues) {\n      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;\n      for (i = 0; i < keys.length; i++) {\n        param = this[keys[i]];\n        rawVal = paramValues[keys[i]];\n        if ((rawVal === undefined || rawVal === null) && param.isOptional)\n          break; // There was no parameter value, but the param is optional\n        normalized = param.type.$normalize(rawVal);\n        if (!param.type.is(normalized))\n          return false; // The value was not of the correct Type, and could not be decoded to the correct Type\n        encoded = param.type.encode(normalized);\n        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))\n          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp\n      }\n      return true;\n    },\n    $$parent: undefined\n  };\n\n  this.ParamSet = ParamSet;\n}\n\n// Register as a provider so it's available to other providers\nangular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);\nangular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);\n\n/**\n * @ngdoc object\n * @name ui.router.router.$urlRouterProvider\n *\n * @requires ui.router.util.$urlMatcherFactoryProvider\n * @requires $locationProvider\n *\n * @description\n * `$urlRouterProvider` has the responsibility of watching `$location`. \n * When `$location` changes it runs through a list of rules one by one until a \n * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify \n * a url in a state configuration. All urls are compiled into a UrlMatcher object.\n *\n * There are several methods on `$urlRouterProvider` that make it useful to use directly\n * in your module config.\n */\n$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];\nfunction $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {\n  var rules = [], otherwise = null, interceptDeferred = false, listener;\n\n  // Returns a string that is a prefix of all strings matching the RegExp\n  function regExpPrefix(re) {\n    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n  }\n\n  // Interpolates matched values into a String.replace()-style pattern\n  function interpolate(pattern, match) {\n    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n      return match[what === '$' ? 0 : Number(what)];\n    });\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#rule\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines rules that are used by `$urlRouterProvider` to find matches for\n   * specific URLs.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Here's an example of how you might allow case insensitive urls\n   *   $urlRouterProvider.rule(function ($injector, $location) {\n   *     var path = $location.path(),\n   *         normalized = path.toLowerCase();\n   *\n   *     if (path !== normalized) {\n   *       return normalized;\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {function} rule Handler function that takes `$injector` and `$location`\n   * services as arguments. You can use them to return a valid path as a string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  this.rule = function (rule) {\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    rules.push(rule);\n    return this;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouterProvider#otherwise\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines a path that is used when an invalid route is requested.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // if the path doesn't match any of the urls you configured\n   *   // otherwise will take care of routing the user to the\n   *   // specified url\n   *   $urlRouterProvider.otherwise('/index');\n   *\n   *   // Example of using function rule as param\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\n   *     return '/a/valid/url';\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|function} rule The url path you want to redirect to or a function \n   * rule that returns the url path. The function version is passed two params: \n   * `$injector` and `$location` services, and must return a url string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  this.otherwise = function (rule) {\n    if (isString(rule)) {\n      var redirect = rule;\n      rule = function () { return redirect; };\n    }\n    else if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    otherwise = rule;\n    return this;\n  };\n\n\n  function handleIfMatch($injector, handler, match) {\n    if (!match) return false;\n    var result = $injector.invoke(handler, handler, { $match: match });\n    return isDefined(result) ? result : true;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#when\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Registers a handler for a given url matching. \n   * \n   * If the handler is a string, it is\n   * treated as a redirect, and is interpolated according to the syntax of match\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n   *\n   * If the handler is a function, it is injectable. It gets invoked if `$location`\n   * matches. You have the option of inject the match object as `$match`.\n   *\n   * The handler can return\n   *\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n   *   will continue trying to find another one that matches.\n   * - **string** which is treated as a redirect and passed to `$location.url()`\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n   *     if ($state.$current.navigable !== state ||\n   *         !equalForKeys($match, $stateParams) {\n   *      $state.transitionTo(state, $match, false);\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|object} what The incoming path that you want to redirect.\n   * @param {string|function} handler The path you want to redirect your user to.\n   */\n  this.when = function (what, handler) {\n    var redirect, handlerIsString = isString(handler);\n    if (isString(what)) what = $urlMatcherFactory.compile(what);\n\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))\n      throw new Error(\"invalid 'handler' in when()\");\n\n    var strategies = {\n      matcher: function (what, handler) {\n        if (handlerIsString) {\n          redirect = $urlMatcherFactory.compile(handler);\n          handler = ['$match', function ($match) { return redirect.format($match); }];\n        }\n        return extend(function ($injector, $location) {\n          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));\n        }, {\n          prefix: isString(what.prefix) ? what.prefix : ''\n        });\n      },\n      regex: function (what, handler) {\n        if (what.global || what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n        if (handlerIsString) {\n          redirect = handler;\n          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\n        }\n        return extend(function ($injector, $location) {\n          return handleIfMatch($injector, handler, what.exec($location.path()));\n        }, {\n          prefix: regExpPrefix(what)\n        });\n      }\n    };\n\n    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };\n\n    for (var n in check) {\n      if (check[n]) return this.rule(strategies[n](what, handler));\n    }\n\n    throw new Error(\"invalid 'what' in when()\");\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#deferIntercept\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Disables (or enables) deferring location change interception.\n   *\n   * If you wish to customize the behavior of syncing the URL (for example, if you wish to\n   * defer a transition but maintain the current URL), call this method at configuration time.\n   * Then, at run time, call `$urlRouter.listen()` after you have configured your own\n   * `$locationChangeSuccess` event handler.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\n   *   // this allows you to configure custom behavior in between\n   *   // location changes and route synchronization:\n   *   $urlRouterProvider.deferIntercept();\n   *\n   * }).run(function ($rootScope, $urlRouter, UserService) {\n   *\n   *   $rootScope.$on('$locationChangeSuccess', function(e) {\n   *     // UserService is an example service for managing user state\n   *     if (UserService.isLoggedIn()) return;\n   *\n   *     // Prevent $urlRouter's default handler from firing\n   *     e.preventDefault();\n   *\n   *     UserService.handleLogin().then(function() {\n   *       // Once the user has logged in, sync the current URL\n   *       // to the router:\n   *       $urlRouter.sync();\n   *     });\n   *   });\n   *\n   *   // Configures $urlRouter's listener *after* your custom listener\n   *   $urlRouter.listen();\n   * });\n   * </pre>\n   *\n   * @param {boolean} defer Indicates whether to defer location change interception. Passing\n            no parameter is equivalent to `true`.\n   */\n  this.deferIntercept = function (defer) {\n    if (defer === undefined) defer = true;\n    interceptDeferred = defer;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouter\n   *\n   * @requires $location\n   * @requires $rootScope\n   * @requires $injector\n   * @requires $browser\n   *\n   * @description\n   *\n   */\n  this.$get = $get;\n  $get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];\n  function $get(   $location,   $rootScope,   $injector,   $browser,   $sniffer) {\n\n    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;\n\n    function appendBasePath(url, isHtml5, absolute) {\n      if (baseHref === '/') return url;\n      if (isHtml5) return baseHref.slice(0, -1) + url;\n      if (absolute) return baseHref.slice(1) + url;\n      return url;\n    }\n\n    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n    function update(evt) {\n      if (evt && evt.defaultPrevented) return;\n      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;\n      lastPushedUrl = undefined;\n      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573\n      //if (ignoreUpdate) return true;\n\n      function check(rule) {\n        var handled = rule($injector, $location);\n\n        if (!handled) return false;\n        if (isString(handled)) $location.replace().url(handled);\n        return true;\n      }\n      var n = rules.length, i;\n\n      for (i = 0; i < n; i++) {\n        if (check(rules[i])) return;\n      }\n      // always check otherwise last to allow dynamic updates to the set of rules\n      if (otherwise) check(otherwise);\n    }\n\n    function listen() {\n      listener = listener || $rootScope.$on('$locationChangeSuccess', update);\n      return listener;\n    }\n\n    if (!interceptDeferred) listen();\n\n    return {\n      /**\n       * @ngdoc function\n       * @name ui.router.router.$urlRouter#sync\n       * @methodOf ui.router.router.$urlRouter\n       *\n       * @description\n       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n       * with the transition by calling `$urlRouter.sync()`.\n       *\n       * @example\n       * <pre>\n       * angular.module('app', ['ui.router'])\n       *   .run(function($rootScope, $urlRouter) {\n       *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n       *       // Halt state change from even starting\n       *       evt.preventDefault();\n       *       // Perform custom logic\n       *       var meetsRequirement = ...\n       *       // Continue with the update and state transition if logic allows\n       *       if (meetsRequirement) $urlRouter.sync();\n       *     });\n       * });\n       * </pre>\n       */\n      sync: function() {\n        update();\n      },\n\n      listen: function() {\n        return listen();\n      },\n\n      update: function(read) {\n        if (read) {\n          location = $location.url();\n          return;\n        }\n        if ($location.url() === location) return;\n\n        $location.url(location);\n        $location.replace();\n      },\n\n      push: function(urlMatcher, params, options) {\n         var url = urlMatcher.format(params || {});\n\n        // Handle the special hash param, if needed\n        if (url !== null && params && params['#']) {\n            url += '#' + params['#'];\n        }\n\n        $location.url(url);\n        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;\n        if (options && options.replace) $location.replace();\n      },\n\n      /**\n       * @ngdoc function\n       * @name ui.router.router.$urlRouter#href\n       * @methodOf ui.router.router.$urlRouter\n       *\n       * @description\n       * A URL generation method that returns the compiled URL for a given\n       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.\n       *\n       * @example\n       * <pre>\n       * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n       *   person: \"bob\"\n       * });\n       * // $bob == \"/about/bob\";\n       * </pre>\n       *\n       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.\n       * @param {object=} params An object of parameter values to fill the matcher's required parameters.\n       * @param {object=} options Options object. The options are:\n       *\n       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n       *\n       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n       */\n      href: function(urlMatcher, params, options) {\n        if (!urlMatcher.validates(params)) return null;\n\n        var isHtml5 = $locationProvider.html5Mode();\n        if (angular.isObject(isHtml5)) {\n          isHtml5 = isHtml5.enabled;\n        }\n\n        isHtml5 = isHtml5 && $sniffer.history;\n        \n        var url = urlMatcher.format(params);\n        options = options || {};\n\n        if (!isHtml5 && url !== null) {\n          url = \"#\" + $locationProvider.hashPrefix() + url;\n        }\n\n        // Handle special hash param, if needed\n        if (url !== null && params && params['#']) {\n          url += '#' + params['#'];\n        }\n\n        url = appendBasePath(url, isHtml5, options.absolute);\n\n        if (!options.absolute || !url) {\n          return url;\n        }\n\n        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();\n        port = (port === 80 || port === 443 ? '' : ':' + port);\n\n        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');\n      }\n    };\n  }\n}\n\nangular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);\n\n/**\n * @ngdoc object\n * @name ui.router.state.$stateProvider\n *\n * @requires ui.router.router.$urlRouterProvider\n * @requires ui.router.util.$urlMatcherFactoryProvider\n *\n * @description\n * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\n$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];\nfunction $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {\n\n  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';\n\n  // Builds state properties from definition passed to registerState()\n  var stateBuilder = {\n\n    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.\n    // state.children = [];\n    // if (parent) parent.children.push(state);\n    parent: function(state) {\n      if (isDefined(state.parent) && state.parent) return findState(state.parent);\n      // regex matches any valid composite state name\n      // would match \"contact.list\" but not \"contacts\"\n      var compositeName = /^(.+)\\.[^.]+$/.exec(state.name);\n      return compositeName ? findState(compositeName[1]) : root;\n    },\n\n    // inherit 'data' from parent and override by own values (if any)\n    data: function(state) {\n      if (state.parent && state.parent.data) {\n        state.data = state.self.data = inherit(state.parent.data, state.data);\n      }\n      return state.data;\n    },\n\n    // Build a URLMatcher if necessary, either via a relative or absolute URL\n    url: function(state) {\n      var url = state.url, config = { params: state.params || {} };\n\n      if (isString(url)) {\n        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);\n        return (state.parent.navigable || root).url.concat(url, config);\n      }\n\n      if (!url || $urlMatcherFactory.isMatcher(url)) return url;\n      throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n    },\n\n    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n    navigable: function(state) {\n      return state.url ? state : (state.parent ? state.parent.navigable : null);\n    },\n\n    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params\n    ownParams: function(state) {\n      var params = state.url && state.url.params || new $$UMFP.ParamSet();\n      forEach(state.params || {}, function(config, id) {\n        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, \"config\");\n      });\n      return params;\n    },\n\n    // Derive parameters for this state and ensure they're a super-set of parent's parameters\n    params: function(state) {\n      var ownParams = pick(state.ownParams, state.ownParams.$$keys());\n      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();\n    },\n\n    // If there is no explicit multi-view configuration, make one up so we don't have\n    // to handle both cases in the view directive later. Note that having an explicit\n    // 'views' property will mean the default unnamed view properties are ignored. This\n    // is also a good time to resolve view names to absolute names, so everything is a\n    // straight lookup at link time.\n    views: function(state) {\n      var views = {};\n\n      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {\n        if (name.indexOf('@') < 0) name += '@' + state.parent.name;\n        views[name] = view;\n      });\n      return views;\n    },\n\n    // Keep a full path from the root down to this state as this is needed for state activation.\n    path: function(state) {\n      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path\n    },\n\n    // Speed up $state.contains() as it's used a lot\n    includes: function(state) {\n      var includes = state.parent ? extend({}, state.parent.includes) : {};\n      includes[state.name] = true;\n      return includes;\n    },\n\n    $delegates: {}\n  };\n\n  function isRelative(stateName) {\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n\n  function findState(stateOrName, base) {\n    if (!stateOrName) return undefined;\n\n    var isStr = isString(stateOrName),\n        name  = isStr ? stateOrName : stateOrName.name,\n        path  = isRelative(name);\n\n    if (path) {\n      if (!base) throw new Error(\"No reference point given for path '\"  + name + \"'\");\n      base = findState(base);\n      \n      var rel = name.split(\".\"), i = 0, pathLength = rel.length, current = base;\n\n      for (; i < pathLength; i++) {\n        if (rel[i] === \"\" && i === 0) {\n          current = base;\n          continue;\n        }\n        if (rel[i] === \"^\") {\n          if (!current.parent) throw new Error(\"Path '\" + name + \"' not valid for state '\" + base.name + \"'\");\n          current = current.parent;\n          continue;\n        }\n        break;\n      }\n      rel = rel.slice(i).join(\".\");\n      name = current.name + (current.name && rel ? \".\" : \"\") + rel;\n    }\n    var state = states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    }\n    return undefined;\n  }\n\n  function queueState(parentName, state) {\n    if (!queue[parentName]) {\n      queue[parentName] = [];\n    }\n    queue[parentName].push(state);\n  }\n\n  function flushQueuedChildren(parentName) {\n    var queued = queue[parentName] || [];\n    while(queued.length) {\n      registerState(queued.shift());\n    }\n  }\n\n  function registerState(state) {\n    // Wrap a new object around the state so we can store our private details easily.\n    state = inherit(state, {\n      self: state,\n      resolve: state.resolve || {},\n      toString: function() { return this.name; }\n    });\n\n    var name = state.name;\n    if (!isString(name) || name.indexOf('@') >= 0) throw new Error(\"State must have a valid name\");\n    if (states.hasOwnProperty(name)) throw new Error(\"State '\" + name + \"' is already defined\");\n\n    // Get parent name\n    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))\n        : (isString(state.parent)) ? state.parent\n        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name\n        : '';\n\n    // If parent is not registered yet, add state to queue and register later\n    if (parentName && !states[parentName]) {\n      return queueState(parentName, state.self);\n    }\n\n    for (var key in stateBuilder) {\n      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);\n    }\n    states[name] = state;\n\n    // Register the state in the global state list and with $urlRouter if necessary.\n    if (!state[abstractKey] && state.url) {\n      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {\n          $state.transitionTo(state, $match, { inherit: true, location: false });\n        }\n      }]);\n    }\n\n    // Register any queued children\n    flushQueuedChildren(name);\n\n    return state;\n  }\n\n  // Checks text to see if it looks like a glob.\n  function isGlob (text) {\n    return text.indexOf('*') > -1;\n  }\n\n  // Returns true if glob matches current $state name.\n  function doesStateMatchGlob (glob) {\n    var globSegments = glob.split('.'),\n        segments = $state.$current.name.split('.');\n\n    //match single stars\n    for (var i = 0, l = globSegments.length; i < l; i++) {\n      if (globSegments[i] === '*') {\n        segments[i] = '*';\n      }\n    }\n\n    //match greedy starts\n    if (globSegments[0] === '**') {\n       segments = segments.slice(indexOf(segments, globSegments[1]));\n       segments.unshift('**');\n    }\n    //match greedy ends\n    if (globSegments[globSegments.length - 1] === '**') {\n       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);\n       segments.push('**');\n    }\n\n    if (globSegments.length != segments.length) {\n      return false;\n    }\n\n    return segments.join('') === globSegments.join('');\n  }\n\n\n  // Implicit root state that is always active\n  root = registerState({\n    name: '',\n    url: '^',\n    views: null,\n    'abstract': true\n  });\n  root.navigable = null;\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#decorator\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Allows you to extend (carefully) or override (at your own peril) the \n   * `stateBuilder` object used internally by `$stateProvider`. This can be used \n   * to add custom functionality to ui-router, for example inferring templateUrl \n   * based on the state name.\n   *\n   * When passing only a name, it returns the current (original or decorated) builder\n   * function that matches `name`.\n   *\n   * The builder functions that can be decorated are listed below. Though not all\n   * necessarily have a good use case for decoration, that is up to you to decide.\n   *\n   * In addition, users can attach custom decorators, which will generate new \n   * properties within the state's internal definition. There is currently no clear \n   * use-case for this beyond accessing internal states (i.e. $state.$current), \n   * however, expect this to become increasingly relevant as we introduce additional \n   * meta-programming features.\n   *\n   * **Warning**: Decorators should not be interdependent because the order of \n   * execution of the builder functions in non-deterministic. Builder functions \n   * should only be dependent on the state definition object and super function.\n   *\n   *\n   * Existing builder functions and current return values:\n   *\n   * - **parent** `{object}` - returns the parent state object.\n   * - **data** `{object}` - returns state data, including any inherited data that is not\n   *   overridden by own values (if any).\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n   *   or `null`.\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is \n   *   navigable).\n   * - **params** `{object}` - returns an array of state params that are ensured to \n   *   be a super-set of parent's params.\n   * - **views** `{object}` - returns a views object where each key is an absolute view \n   *   name (i.e. \"viewName@stateName\") and each value is the config object \n   *   (template, controller) for the view. Even when you don't use the views object \n   *   explicitly on a state config, one is still created for you internally.\n   *   So by decorating this builder function you have access to decorating template \n   *   and controller properties.\n   * - **ownParams** `{object}` - returns an array of params that belong to the state, \n   *   not including any params defined by ancestor states.\n   * - **path** `{string}` - returns the full path from the root down to this state. \n   *   Needed for state activation.\n   * - **includes** `{object}` - returns an object that includes every state that \n   *   would pass a `$state.includes()` test.\n   *\n   * @example\n   * <pre>\n   * // Override the internal 'views' builder with a function that takes the state\n   * // definition, and a reference to the internal function being overridden:\n   * $stateProvider.decorator('views', function (state, parent) {\n   *   var result = {},\n   *       views = parent(state);\n   *\n   *   angular.forEach(views, function (config, name) {\n   *     var autoName = (state.name + '.' + name).replace('.', '/');\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n   *     result[name] = config;\n   *   });\n   *   return result;\n   * });\n   *\n   * $stateProvider.state('home', {\n   *   views: {\n   *     'contact.list': { controller: 'ListController' },\n   *     'contact.item': { controller: 'ItemController' }\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * $state.go('home');\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\n   * // and /partials/home/contact/item.html, respectively.\n   * </pre>\n   *\n   * @param {string} name The name of the builder function to decorate. \n   * @param {object} func A function that is responsible for decorating the original \n   * builder function. The function receives two parameters:\n   *\n   *   - `{object}` - state - The state config object.\n   *   - `{object}` - super - The original builder function.\n   *\n   * @return {object} $stateProvider - $stateProvider instance\n   */\n  this.decorator = decorator;\n  function decorator(name, func) {\n    /*jshint validthis: true */\n    if (isString(name) && !isDefined(func)) {\n      return stateBuilder[name];\n    }\n    if (!isFunction(func) || !isString(name)) {\n      return this;\n    }\n    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {\n      stateBuilder.$delegates[name] = stateBuilder[name];\n    }\n    stateBuilder[name] = func;\n    return this;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#state\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Registers a state configuration under a given state name. The stateConfig object\n   * has the following acceptable properties.\n   *\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n   * @param {object} stateConfig State configuration object.\n   * @param {string|function=} stateConfig.template\n   * <a id='template'></a>\n   *   html template as a string or a function that returns\n   *   an html template as a string which should be used by the uiView directives. This property \n   *   takes precedence over templateUrl.\n   *   \n   *   If `template` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <pre>template:\n   *   \"<h1>inline template definition</h1>\" +\n   *   \"<div ui-view></div>\"</pre>\n   * <pre>template: function(params) {\n   *       return \"<h1>generated template</h1>\"; }</pre>\n   * </div>\n   *\n   * @param {string|function=} stateConfig.templateUrl\n   * <a id='templateUrl'></a>\n   *\n   *   path or function that returns a path to an html\n   *   template that should be used by uiView.\n   *   \n   *   If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by \n   *     applying the current state\n   *\n   * <pre>templateUrl: \"home.html\"</pre>\n   * <pre>templateUrl: function(params) {\n   *     return myTemplates[params.pageId]; }</pre>\n   *\n   * @param {function=} stateConfig.templateProvider\n   * <a id='templateProvider'></a>\n   *    Provider function that returns HTML content string.\n   * <pre> templateProvider:\n   *       function(MyTemplateService, params) {\n   *         return MyTemplateService.getTemplate(params.pageId);\n   *       }</pre>\n   *\n   * @param {string|function=} stateConfig.controller\n   * <a id='controller'></a>\n   *\n   *  Controller fn that should be associated with newly\n   *   related scope or the name of a registered controller if passed as a string.\n   *   Optionally, the ControllerAs may be declared here.\n   * <pre>controller: \"MyRegisteredController\"</pre>\n   * <pre>controller:\n   *     \"MyRegisteredController as fooCtrl\"}</pre>\n   * <pre>controller: function($scope, MyService) {\n   *     $scope.data = MyService.getData(); }</pre>\n   *\n   * @param {function=} stateConfig.controllerProvider\n   * <a id='controllerProvider'></a>\n   *\n   * Injectable provider function that returns the actual controller or string.\n   * <pre>controllerProvider:\n   *   function(MyResolveData) {\n   *     if (MyResolveData.foo)\n   *       return \"FooCtrl\"\n   *     else if (MyResolveData.bar)\n   *       return \"BarCtrl\";\n   *     else return function($scope) {\n   *       $scope.baz = \"Qux\";\n   *     }\n   *   }</pre>\n   *\n   * @param {string=} stateConfig.controllerAs\n   * <a id='controllerAs'></a>\n   * \n   * A controller alias name. If present the controller will be\n   *   published to scope under the controllerAs name.\n   * <pre>controllerAs: \"myCtrl\"</pre>\n   *\n   * @param {string|object=} stateConfig.parent\n   * <a id='parent'></a>\n   * Optionally specifies the parent state of this state.\n   *\n   * <pre>parent: 'parentState'</pre>\n   * <pre>parent: parentState // JS variable</pre>\n   *\n   * @param {object=} stateConfig.resolve\n   * <a id='resolve'></a>\n   *\n   * An optional map&lt;string, function&gt; of dependencies which\n   *   should be injected into the controller. If any of these dependencies are promises, \n   *   the router will wait for them all to be resolved before the controller is instantiated.\n   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired\n   *   and the values of the resolved promises are injected into any controllers that reference them.\n   *   If any  of the promises are rejected the $stateChangeError event is fired.\n   *\n   *   The map object is:\n   *   \n   *   - key - {string}: name of dependency to be injected into controller\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, \n   *     it is injected and return value it treated as dependency. If result is a promise, it is \n   *     resolved before its value is injected into controller.\n   *\n   * <pre>resolve: {\n   *     myResolve1:\n   *       function($http, $stateParams) {\n   *         return $http.get(\"/api/foos/\"+stateParams.fooID);\n   *       }\n   *     }</pre>\n   *\n   * @param {string=} stateConfig.url\n   * <a id='url'></a>\n   *\n   *   A url fragment with optional parameters. When a state is navigated or\n   *   transitioned to, the `$stateParams` service will be populated with any \n   *   parameters that were passed.\n   *\n   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for\n   *   more details on acceptable patterns )\n   *\n   * examples:\n   * <pre>url: \"/home\"\n   * url: \"/users/:userid\"\n   * url: \"/books/{bookid:[a-zA-Z_-]}\"\n   * url: \"/books/{categoryid:int}\"\n   * url: \"/books/{publishername:string}/{categoryid:int}\"\n   * url: \"/messages?before&after\"\n   * url: \"/messages?{before:date}&{after:date}\"\n   * url: \"/messages/:mailboxid?{before:date}&{after:date}\"\n   * </pre>\n   *\n   * @param {object=} stateConfig.views\n   * <a id='views'></a>\n   * an optional map&lt;string, object&gt; which defined multiple views, or targets views\n   * manually/explicitly.\n   *\n   * Examples:\n   *\n   * Targets three named `ui-view`s in the parent state's template\n   * <pre>views: {\n   *     header: {\n   *       controller: \"headerCtrl\",\n   *       templateUrl: \"header.html\"\n   *     }, body: {\n   *       controller: \"bodyCtrl\",\n   *       templateUrl: \"body.html\"\n   *     }, footer: {\n   *       controller: \"footCtrl\",\n   *       templateUrl: \"footer.html\"\n   *     }\n   *   }</pre>\n   *\n   * Targets named `ui-view=\"header\"` from grandparent state 'top''s template, and named `ui-view=\"body\" from parent state's template.\n   * <pre>views: {\n   *     'header@top': {\n   *       controller: \"msgHeaderCtrl\",\n   *       templateUrl: \"msgHeader.html\"\n   *     }, 'body': {\n   *       controller: \"messagesCtrl\",\n   *       templateUrl: \"messages.html\"\n   *     }\n   *   }</pre>\n   *\n   * @param {boolean=} [stateConfig.abstract=false]\n   * <a id='abstract'></a>\n   * An abstract state will never be directly activated,\n   *   but can provide inherited properties to its common children states.\n   * <pre>abstract: true</pre>\n   *\n   * @param {function=} stateConfig.onEnter\n   * <a id='onEnter'></a>\n   *\n   * Callback function for when a state is entered. Good way\n   *   to trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to explicitly annotate this function,\n   * because it won't be automatically annotated by your build tools.\n   *\n   * <pre>onEnter: function(MyService, $stateParams) {\n   *     MyService.foo($stateParams.myParam);\n   * }</pre>\n   *\n   * @param {function=} stateConfig.onExit\n   * <a id='onExit'></a>\n   *\n   * Callback function for when a state is exited. Good way to\n   *   trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to explicitly annotate this function,\n   * because it won't be automatically annotated by your build tools.\n   *\n   * <pre>onExit: function(MyService, $stateParams) {\n   *     MyService.cleanup($stateParams.myParam);\n   * }</pre>\n   *\n   * @param {boolean=} [stateConfig.reloadOnSearch=true]\n   * <a id='reloadOnSearch'></a>\n   *\n   * If `false`, will not retrigger the same state\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). \n   *   Useful for when you'd like to modify $location.search() without triggering a reload.\n   * <pre>reloadOnSearch: false</pre>\n   *\n   * @param {object=} stateConfig.data\n   * <a id='data'></a>\n   *\n   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is\n   *   prototypally inherited.  In other words, adding a data property to a state adds it to\n   *   the entire subtree via prototypal inheritance.\n   *\n   * <pre>data: {\n   *     requiredRole: 'foo'\n   * } </pre>\n   *\n   * @param {object=} stateConfig.params\n   * <a id='params'></a>\n   *\n   * A map which optionally configures parameters declared in the `url`, or\n   *   defines additional non-url parameters.  For each parameter being\n   *   configured, add a configuration object keyed to the name of the parameter.\n   *\n   *   Each parameter configuration object may contain the following properties:\n   *\n   *   - ** value ** - {object|function=}: specifies the default value for this\n   *     parameter.  This implicitly sets this parameter as optional.\n   *\n   *     When UI-Router routes to a state and no value is\n   *     specified for this parameter in the URL or transition, the\n   *     default value will be used instead.  If `value` is a function,\n   *     it will be injected and invoked, and the return value used.\n   *\n   *     *Note*: `undefined` is treated as \"no default value\" while `null`\n   *     is treated as \"the default value is `null`\".\n   *\n   *     *Shorthand*: If you only need to configure the default value of the\n   *     parameter, you may use a shorthand syntax.   In the **`params`**\n   *     map, instead mapping the param name to a full parameter configuration\n   *     object, simply set map it to the default parameter value, e.g.:\n   *\n   * <pre>// define a parameter's default value\n   * params: {\n   *     param1: { value: \"defaultValue\" }\n   * }\n   * // shorthand default values\n   * params: {\n   *     param1: \"defaultValue\",\n   *     param2: \"param2Default\"\n   * }</pre>\n   *\n   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be\n   *     treated as an array of values.  If you specified a Type, the value will be\n   *     treated as an array of the specified Type.  Note: query parameter values\n   *     default to a special `\"auto\"` mode.\n   *\n   *     For query parameters in `\"auto\"` mode, if multiple  values for a single parameter\n   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values\n   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if\n   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single\n   *     value (e.g.: `{ foo: '1' }`).\n   *\n   * <pre>params: {\n   *     param1: { array: true }\n   * }</pre>\n   *\n   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when\n   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the\n   *     configured default squash policy.\n   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})\n   *\n   *   There are three squash settings:\n   *\n   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL\n   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed\n   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.\n   *       This can allow for cleaner looking URLs.\n   *     - `\"<arbitrary string>\"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.\n   *\n   * <pre>params: {\n   *     param1: {\n   *       value: \"defaultId\",\n   *       squash: true\n   * } }\n   * // squash \"defaultValue\" to \"~\"\n   * params: {\n   *     param1: {\n   *       value: \"defaultValue\",\n   *       squash: \"~\"\n   * } }\n   * </pre>\n   *\n   *\n   * @example\n   * <pre>\n   * // Some state name examples\n   *\n   * // stateName can be a single top-level name (must be unique).\n   * $stateProvider.state(\"home\", {});\n   *\n   * // Or it can be a nested state name. This state is a child of the\n   * // above \"home\" state.\n   * $stateProvider.state(\"home.newest\", {});\n   *\n   * // Nest states as deeply as needed.\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n   *\n   * // state() returns $stateProvider, so you can chain state declarations.\n   * $stateProvider\n   *   .state(\"home\", {})\n   *   .state(\"about\", {})\n   *   .state(\"contacts\", {});\n   * </pre>\n   *\n   */\n  this.state = state;\n  function state(name, definition) {\n    /*jshint validthis: true */\n    if (isObject(name)) definition = name;\n    else definition.name = name;\n    registerState(definition);\n    return this;\n  }\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$state\n   *\n   * @requires $rootScope\n   * @requires $q\n   * @requires ui.router.state.$view\n   * @requires $injector\n   * @requires ui.router.util.$resolve\n   * @requires ui.router.state.$stateParams\n   * @requires ui.router.router.$urlRouter\n   *\n   * @property {object} params A param object, e.g. {sectionId: section.id)}, that \n   * you'd like to test against the current active state.\n   * @property {object} current A reference to the state's config object. However \n   * you passed it in. Useful for accessing custom data.\n   * @property {object} transition Currently pending transition. A promise that'll \n   * resolve or reject.\n   *\n   * @description\n   * `$state` service is responsible for representing states as well as transitioning\n   * between them. It also provides interfaces to ask for current state or even states\n   * you're coming from.\n   */\n  this.$get = $get;\n  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];\n  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {\n\n    var TransitionSuperseded = $q.reject(new Error('transition superseded'));\n    var TransitionPrevented = $q.reject(new Error('transition prevented'));\n    var TransitionAborted = $q.reject(new Error('transition aborted'));\n    var TransitionFailed = $q.reject(new Error('transition failed'));\n\n    // Handles the case where a state which is the target of a transition is not found, and the user\n    // can optionally retry or defer the transition\n    function handleRedirect(redirect, state, params, options) {\n      /**\n       * @ngdoc event\n       * @name ui.router.state.$state#$stateNotFound\n       * @eventOf ui.router.state.$state\n       * @eventType broadcast on root scope\n       * @description\n       * Fired when a requested state **cannot be found** using the provided state name during transition.\n       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by\n       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,\n       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the\n       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.\n       *\n       * @param {Object} event Event object.\n       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.\n       * @param {State} fromState Current state object.\n       * @param {Object} fromParams Current state params.\n       *\n       * @example\n       *\n       * <pre>\n       * // somewhere, assume lazy.state has not been defined\n       * $state.go(\"lazy.state\", {a:1, b:2}, {inherit:false});\n       *\n       * // somewhere else\n       * $scope.$on('$stateNotFound',\n       * function(event, unfoundState, fromState, fromParams){\n       *     console.log(unfoundState.to); // \"lazy.state\"\n       *     console.log(unfoundState.toParams); // {a:1, b:2}\n       *     console.log(unfoundState.options); // {inherit:false} + default options\n       * })\n       * </pre>\n       */\n      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);\n\n      if (evt.defaultPrevented) {\n        $urlRouter.update();\n        return TransitionAborted;\n      }\n\n      if (!evt.retry) {\n        return null;\n      }\n\n      // Allow the handler to return a promise to defer state lookup retry\n      if (options.$retry) {\n        $urlRouter.update();\n        return TransitionFailed;\n      }\n      var retryTransition = $state.transition = $q.when(evt.retry);\n\n      retryTransition.then(function() {\n        if (retryTransition !== $state.transition) return TransitionSuperseded;\n        redirect.options.$retry = true;\n        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);\n      }, function() {\n        return TransitionAborted;\n      });\n      $urlRouter.update();\n\n      return retryTransition;\n    }\n\n    root.locals = { resolve: null, globals: { $stateParams: {} } };\n\n    $state = {\n      params: {},\n      current: root.self,\n      $current: root,\n      transition: null\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#reload\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A method that force reloads the current state. All resolves are re-resolved,\n     * controllers reinstantiated, and events re-fired.\n     *\n     * @example\n     * <pre>\n     * var app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     $state.reload();\n     *   }\n     * });\n     * </pre>\n     *\n     * `reload()` is just an alias for:\n     * <pre>\n     * $state.transitionTo($state.current, $stateParams, { \n     *   reload: true, inherit: false, notify: true\n     * });\n     * </pre>\n     *\n     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.\n     * @example\n     * <pre>\n     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' \n     * //and current state is 'contacts.detail.item'\n     * var app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     //will reload 'contact.detail' and 'contact.detail.item' states\n     *     $state.reload('contact.detail');\n     *   }\n     * });\n     * </pre>\n     *\n     * `reload()` is just an alias for:\n     * <pre>\n     * $state.transitionTo($state.current, $stateParams, { \n     *   reload: true, inherit: false, notify: true\n     * });\n     * </pre>\n\n     * @returns {promise} A promise representing the state of the new transition. See\n     * {@link ui.router.state.$state#methods_go $state.go}.\n     */\n    $state.reload = function reload(state) {\n      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#go\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Convenience method for transitioning to a new state. `$state.go` calls \n     * `$state.transitionTo` internally but automatically sets options to \n     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. \n     * This allows you to easily use an absolute or relative to path and specify \n     * only the parameters you'd like to update (while letting unspecified parameters \n     * inherit from the currently active ancestor states).\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.go('contact.detail');\n     *   };\n     * });\n     * </pre>\n     * <img src='../ngdoc_assets/StateGoExamples.png'/>\n     *\n     * @param {string} to Absolute state name or relative state path. Some examples:\n     *\n     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n     * - `$state.go('^')` - will go to a parent state\n     * - `$state.go('^.sibling')` - will go to a sibling state\n     * - `$state.go('.child.grandchild')` - will go to grandchild state\n     *\n     * @param {object=} params A map of the parameters that will be sent to the state, \n     * will populate $stateParams. Any parameters that are not specified will be inherited from currently \n     * defined parameters. Only parameters specified in the state definition can be overridden, new \n     * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters\n     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n     * will get you all current parameters, etc.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n     * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params\n     *    have changed.  It will reload the resolves and views of the current state and parent states.\n     *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \\\n     *    the transition reloads the resolves and views for that matched state, and all its children states.\n     *\n     * @returns {promise} A promise representing the state of the new transition.\n     *\n     * Possible success values:\n     *\n     * - $state.current\n     *\n     * <br/>Possible rejection values:\n     *\n     * - 'transition superseded' - when a newer transition has been started after this one\n     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n     *   when a `$stateNotFound` `event.retry` promise errors.\n     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n     * - *resolve error* - when an error has occurred with a `resolve`\n     *\n     */\n    $state.go = function go(to, params, options) {\n      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#transitionTo\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.transitionTo('contact.detail');\n     *   };\n     * });\n     * </pre>\n     *\n     * @param {string} to State name.\n     * @param {object=} toParams A map of the parameters that will be sent to the state,\n     * will populate $stateParams.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params \n     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n     *    use this when you want to force a reload when *everything* is the same, including search params.\n     *    if String, then will reload the state with the name given in reload, and any children.\n     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.\n     *\n     * @returns {promise} A promise representing the state of the new transition. See\n     * {@link ui.router.state.$state#methods_go $state.go}.\n     */\n    $state.transitionTo = function transitionTo(to, toParams, options) {\n      toParams = toParams || {};\n      options = extend({\n        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false\n      }, options || {});\n\n      var from = $state.$current, fromParams = $state.params, fromPath = from.path;\n      var evt, toState = findState(to, options.relative);\n\n      // Store the hash param for later (since it will be stripped out by various methods)\n      var hash = toParams['#'];\n\n      if (!isDefined(toState)) {\n        var redirect = { to: to, toParams: toParams, options: options };\n        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);\n\n        if (redirectResult) {\n          return redirectResult;\n        }\n\n        // Always retry once if the $stateNotFound was not prevented\n        // (handles either redirect changed or state lazy-definition)\n        to = redirect.to;\n        toParams = redirect.toParams;\n        options = redirect.options;\n        toState = findState(to, options.relative);\n\n        if (!isDefined(toState)) {\n          if (!options.relative) throw new Error(\"No such state '\" + to + \"'\");\n          throw new Error(\"Could not resolve '\" + to + \"' from state '\" + options.relative + \"'\");\n        }\n      }\n      if (toState[abstractKey]) throw new Error(\"Cannot transition to abstract state '\" + to + \"'\");\n      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);\n      if (!toState.params.$$validates(toParams)) return TransitionFailed;\n\n      toParams = toState.params.$$values(toParams);\n      to = toState;\n\n      var toPath = to.path;\n\n      // Starting from the root of the path, keep all levels that haven't changed\n      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];\n\n      if (!options.reload) {\n        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {\n          locals = toLocals[keep] = state.locals;\n          keep++;\n          state = toPath[keep];\n        }\n      } else if (isString(options.reload) || isObject(options.reload)) {\n        if (isObject(options.reload) && !options.reload.name) {\n          throw new Error('Invalid reload state object');\n        }\n        \n        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);\n        if (options.reload && !reloadState) {\n          throw new Error(\"No such reload state '\" + (isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n        }\n\n        while (state && state === fromPath[keep] && state !== reloadState) {\n          locals = toLocals[keep] = state.locals;\n          keep++;\n          state = toPath[keep];\n        }\n      }\n\n      // If we're going to the same state and all locals are kept, we've got nothing to do.\n      // But clear 'transition', as we still want to cancel any other pending transitions.\n      // TODO: We may not want to bump 'transition' if we're called from a location change\n      // that we've initiated ourselves, because we might accidentally abort a legitimate\n      // transition initiated from code?\n      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {\n        if (hash) toParams['#'] = hash;\n        $state.params = toParams;\n        copy($state.params, $stateParams);\n        copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);\n        if (options.location && to.navigable && to.navigable.url) {\n          $urlRouter.push(to.navigable.url, toParams, {\n            $$avoidResync: true, replace: options.location === 'replace'\n          });\n          $urlRouter.update(true);\n        }\n        $state.transition = null;\n        return $q.when($state.current);\n      }\n\n      // Filter parameters before we pass them to event handlers etc.\n      toParams = filterByKeys(to.params.$$keys(), toParams || {});\n      \n      // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart\n      if (hash) toParams['#'] = hash;\n      \n      // Broadcast start event and cancel the transition if requested\n      if (options.notify) {\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeStart\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired when the state transition **begins**. You can use `event.preventDefault()`\n         * to prevent the transition from happening and then the transition promise will be\n         * rejected with a `'transition prevented'` value.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         *\n         * @example\n         *\n         * <pre>\n         * $rootScope.$on('$stateChangeStart',\n         * function(event, toState, toParams, fromState, fromParams){\n         *     event.preventDefault();\n         *     // transitionTo() promise will be rejected with\n         *     // a 'transition prevented' error\n         * })\n         * </pre>\n         */\n        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {\n          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n          //Don't update and resync url if there's been a new transition started. see issue #2238, #600\n          if ($state.transition == null) $urlRouter.update();\n          return TransitionPrevented;\n        }\n      }\n\n      // Resolve locals for the remaining states, but don't update any global state just\n      // yet -- if anything fails to resolve the current state needs to remain untouched.\n      // We also set up an inheritance chain for the locals here. This allows the view directive\n      // to quickly look up the correct definition for each view in the current state. Even\n      // though we create the locals object itself outside resolveState(), it is initially\n      // empty and gets filled asynchronously. We need to keep track of the promise for the\n      // (fully resolved) current locals, and pass this down the chain.\n      var resolved = $q.when(locals);\n\n      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {\n        locals = toLocals[l] = inherit(locals);\n        resolved = resolveState(state, toParams, state === to, resolved, locals, options);\n      }\n\n      // Once everything is resolved, we are ready to perform the actual transition\n      // and return a promise for the new state. We also keep track of what the\n      // current promise is, so that we can detect overlapping transitions and\n      // keep only the outcome of the last transition.\n      var transition = $state.transition = resolved.then(function () {\n        var l, entering, exiting;\n\n        if ($state.transition !== transition) return TransitionSuperseded;\n\n        // Exit 'from' states not kept\n        for (l = fromPath.length - 1; l >= keep; l--) {\n          exiting = fromPath[l];\n          if (exiting.self.onExit) {\n            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);\n          }\n          exiting.locals = null;\n        }\n\n        // Enter 'to' states not kept\n        for (l = keep; l < toPath.length; l++) {\n          entering = toPath[l];\n          entering.locals = toLocals[l];\n          if (entering.self.onEnter) {\n            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);\n          }\n        }\n\n        // Run it again, to catch any transitions in callbacks\n        if ($state.transition !== transition) return TransitionSuperseded;\n\n        // Update globals in $state\n        $state.$current = to;\n        $state.current = to.self;\n        $state.params = toParams;\n        copy($state.params, $stateParams);\n        $state.transition = null;\n\n        if (options.location && to.navigable) {\n          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {\n            $$avoidResync: true, replace: options.location === 'replace'\n          });\n        }\n\n        if (options.notify) {\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeSuccess\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired once the state transition is **complete**.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         */\n          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);\n        }\n        $urlRouter.update(true);\n\n        return $state.current;\n      }, function (error) {\n        if ($state.transition !== transition) return TransitionSuperseded;\n\n        $state.transition = null;\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeError\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired when an **error occurs** during transition. It's important to note that if you\n         * have any errors in your resolve functions (javascript errors, non-existent services, etc)\n         * they will not throw traditionally. You must listen for this $stateChangeError event to\n         * catch **ALL** errors.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         * @param {Error} error The resolve error object.\n         */\n        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);\n\n        if (!evt.defaultPrevented) {\n            $urlRouter.update();\n        }\n\n        return $q.reject(error);\n      });\n\n      return transition;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#is\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n     * but only checks for the full state name. If params is supplied then it will be\n     * tested for strict equality against the current active params object, so all params\n     * must match with none missing and no extras.\n     *\n     * @example\n     * <pre>\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // absolute name\n     * $state.is('contact.details.item'); // returns true\n     * $state.is(contactDetailItemStateObject); // returns true\n     *\n     * // relative name (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n     * </pre>\n     *\n     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n     * to test against the current active state.\n     * @param {object=} options An options object.  The options are:\n     *\n     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     * test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it is the state.\n     */\n    $state.is = function is(stateOrName, params, options) {\n      options = extend({ relative: $state.$current }, options || {});\n      var state = findState(stateOrName, options.relative);\n\n      if (!isDefined(state)) { return undefined; }\n      if ($state.$current !== state) { return false; }\n      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#includes\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A method to determine if the current active state is equal to or is the child of the\n     * state stateName. If any params are passed then they will be tested for a match as well.\n     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n     *\n     * @example\n     * Partial and relative names\n     * <pre>\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // Using partial names\n     * $state.includes(\"contacts\"); // returns true\n     * $state.includes(\"contacts.details\"); // returns true\n     * $state.includes(\"contacts.details.item\"); // returns true\n     * $state.includes(\"contacts.list\"); // returns false\n     * $state.includes(\"about\"); // returns false\n     *\n     * // Using relative names (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n     * </pre>\n     *\n     * Basic globbing patterns\n     * <pre>\n     * $state.$current.name = 'contacts.details.item.url';\n     *\n     * $state.includes(\"*.details.*.*\"); // returns true\n     * $state.includes(\"*.details.**\"); // returns true\n     * $state.includes(\"**.item.**\"); // returns true\n     * $state.includes(\"*.details.item.url\"); // returns true\n     * $state.includes(\"*.details.*.url\"); // returns true\n     * $state.includes(\"*.details.*\"); // returns false\n     * $state.includes(\"item.**\"); // returns false\n     * </pre>\n     *\n     * @param {string} stateOrName A partial name, relative name, or glob pattern\n     * to be searched for within the current state name.\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n     * that you'd like to test against the current active state.\n     * @param {object=} options An options object.  The options are:\n     *\n     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n     * .includes will test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it does include the state\n     */\n    $state.includes = function includes(stateOrName, params, options) {\n      options = extend({ relative: $state.$current }, options || {});\n      if (isString(stateOrName) && isGlob(stateOrName)) {\n        if (!doesStateMatchGlob(stateOrName)) {\n          return false;\n        }\n        stateOrName = $state.$current.name;\n      }\n\n      var state = findState(stateOrName, options.relative);\n      if (!isDefined(state)) { return undefined; }\n      if (!isDefined($state.$current.includes[state.name])) { return false; }\n      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;\n    };\n\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#href\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A url generation method that returns the compiled url for the given state populated with the given params.\n     *\n     * @example\n     * <pre>\n     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n     * </pre>\n     *\n     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n     * @param {object=} params An object of parameter values to fill the state's required parameters.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n     *    ancestor with a valid url).\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n     * \n     * @returns {string} compiled state url\n     */\n    $state.href = function href(stateOrName, params, options) {\n      options = extend({\n        lossy:    true,\n        inherit:  true,\n        absolute: false,\n        relative: $state.$current\n      }, options || {});\n\n      var state = findState(stateOrName, options.relative);\n\n      if (!isDefined(state)) return null;\n      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);\n      \n      var nav = (state && options.lossy) ? state.navigable : state;\n\n      if (!nav || nav.url === undefined || nav.url === null) {\n        return null;\n      }\n      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {\n        absolute: options.absolute\n      });\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#get\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Returns the state configuration object for any specific state or all states.\n     *\n     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for\n     * the requested state. If not provided, returns an array of ALL state configs.\n     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.\n     * @returns {Object|Array} State configuration object or array of all objects.\n     */\n    $state.get = function (stateOrName, context) {\n      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });\n      var state = findState(stateOrName, context || $state.$current);\n      return (state && state.self) ? state.self : null;\n    };\n\n    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {\n      // Make a restricted $stateParams with only the parameters that apply to this state if\n      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,\n      // we also need $stateParams to be available for any $injector calls we make during the\n      // dependency resolution process.\n      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);\n      var locals = { $stateParams: $stateParams };\n\n      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.\n      // We're also including $stateParams in this; that way the parameters are restricted\n      // to the set that should be visible to the state, and are independent of when we update\n      // the global $state and $stateParams values.\n      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);\n      var promises = [dst.resolve.then(function (globals) {\n        dst.globals = globals;\n      })];\n      if (inherited) promises.push(inherited);\n\n      function resolveViews() {\n        var viewsPromises = [];\n\n        // Resolve template and dependencies for all views.\n        forEach(state.views, function (view, name) {\n          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});\n          injectables.$template = [ function () {\n            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';\n          }];\n\n          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {\n            // References to the controller (only instantiated at link time)\n            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {\n              var injectLocals = angular.extend({}, injectables, dst.globals);\n              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);\n            } else {\n              result.$$controller = view.controller;\n            }\n            // Provide access to the state itself for internal use\n            result.$$state = state;\n            result.$$controllerAs = view.controllerAs;\n            dst[name] = result;\n          }));\n        });\n\n        return $q.all(viewsPromises).then(function(){\n          return dst.globals;\n        });\n      }\n\n      // Wait for all the promises and then return the activation object\n      return $q.all(promises).then(resolveViews).then(function (values) {\n        return dst;\n      });\n    }\n\n    return $state;\n  }\n\n  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {\n    // Return true if there are no differences in non-search (path/object) params, false if there are differences\n    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {\n      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.\n      function notSearchParam(key) {\n        return fromAndToState.params[key].location != \"search\";\n      }\n      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);\n      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));\n      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);\n      return nonQueryParamSet.$$equals(fromParams, toParams);\n    }\n\n    // If reload was not explicitly requested\n    // and we're transitioning to the same state we're already in\n    // and    the locals didn't change\n    //     or they changed in a way that doesn't merit reloading\n    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)\n    // Then return true.\n    if (!options.reload && to === from &&\n      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {\n      return true;\n    }\n  }\n}\n\nangular.module('ui.router.state')\n  .factory('$stateParams', function () { return {}; })\n  .provider('$state', $StateProvider);\n\n\n$ViewProvider.$inject = [];\nfunction $ViewProvider() {\n\n  this.$get = $get;\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$view\n   *\n   * @requires ui.router.util.$templateFactory\n   * @requires $rootScope\n   *\n   * @description\n   *\n   */\n  $get.$inject = ['$rootScope', '$templateFactory'];\n  function $get(   $rootScope,   $templateFactory) {\n    return {\n      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$view#load\n       * @methodOf ui.router.state.$view\n       *\n       * @description\n       *\n       * @param {string} name name\n       * @param {object} options option object.\n       */\n      load: function load(name, options) {\n        var result, defaults = {\n          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}\n        };\n        options = extend(defaults, options);\n\n        if (options.view) {\n          result = $templateFactory.fromConfig(options.view, options.params, options.locals);\n        }\n        return result;\n      }\n    };\n  }\n}\n\nangular.module('ui.router.state').provider('$view', $ViewProvider);\n\n/**\n * @ngdoc object\n * @name ui.router.state.$uiViewScrollProvider\n *\n * @description\n * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\n */\nfunction $ViewScrollProvider() {\n\n  var useAnchorScroll = false;\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\n   * @methodOf ui.router.state.$uiViewScrollProvider\n   *\n   * @description\n   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\n   * scrolling based on the url anchor.\n   */\n  this.useAnchorScroll = function () {\n    useAnchorScroll = true;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$uiViewScroll\n   *\n   * @requires $anchorScroll\n   * @requires $timeout\n   *\n   * @description\n   * When called with a jqLite element, it scrolls the element into view (after a\n   * `$timeout` so the DOM has time to refresh).\n   *\n   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n   */\n  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n    if (useAnchorScroll) {\n      return $anchorScroll;\n    }\n\n    return function ($element) {\n      return $timeout(function () {\n        $element[0].scrollIntoView();\n      }, 0, false);\n    };\n  }];\n}\n\nangular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);\n\nvar ngMajorVer = angular.version.major;\nvar ngMinorVer = angular.version.minor;\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-view\n *\n * @requires ui.router.state.$state\n * @requires $compile\n * @requires $controller\n * @requires $injector\n * @requires ui.router.state.$uiViewScroll\n * @requires $document\n *\n * @restrict ECA\n *\n * @description\n * The ui-view directive tells $state where to place your templates.\n *\n * @param {string=} name A view name. The name should be unique amongst the other views in the\n * same state. You can have views of the same name that live in different states.\n *\n * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n * scroll ui-view elements into view when they are populated during a state activation.\n *\n * @param {string=} noanimation If truthy, the non-animated renderer will be selected (no animations\n * will be applied to the ui-view)\n *\n * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n *\n * @param {string=} onload Expression to evaluate whenever the view updates.\n * \n * @example\n * A view can be unnamed or named. \n * <pre>\n * <!-- Unnamed -->\n * <div ui-view></div> \n * \n * <!-- Named -->\n * <div ui-view=\"viewName\"></div>\n * </pre>\n *\n * You can only have one unnamed view within any template (or root html). If you are only using a \n * single view and it is unnamed then you can populate it like so:\n * <pre>\n * <div ui-view></div> \n * $stateProvider.state(\"home\", {\n *   template: \"<h1>HELLO!</h1>\"\n * })\n * </pre>\n * \n * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}\n * config property, by name, in this case an empty name:\n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }    \n * })\n * </pre>\n * \n * But typically you'll only use the views property if you name your view or have more than one view \n * in the same template. There's not really a compelling reason to name a view if its the only one, \n * but you could if you wanted, like so:\n * <pre>\n * <div ui-view=\"main\"></div>\n * </pre> \n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"main\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }    \n * })\n * </pre>\n * \n * Really though, you'll use views to set up multiple views:\n * <pre>\n * <div ui-view></div>\n * <div ui-view=\"chart\"></div> \n * <div ui-view=\"data\"></div> \n * </pre>\n * \n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     },\n *     \"chart\": {\n *       template: \"<chart_thing/>\"\n *     },\n *     \"data\": {\n *       template: \"<data_thing/>\"\n *     }\n *   }    \n * })\n * </pre>\n *\n * Examples for `autoscroll`:\n *\n * <pre>\n * <!-- If autoscroll present with no expression,\n *      then scroll ui-view into view -->\n * <ui-view autoscroll/>\n *\n * <!-- If autoscroll present with valid expression,\n *      then scroll ui-view into view if expression evaluates to true -->\n * <ui-view autoscroll='true'/>\n * <ui-view autoscroll='false'/>\n * <ui-view autoscroll='scopeVariable'/>\n * </pre>\n */\n$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];\nfunction $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {\n\n  function getService() {\n    return ($injector.has) ? function(service) {\n      return $injector.has(service) ? $injector.get(service) : null;\n    } : function(service) {\n      try {\n        return $injector.get(service);\n      } catch (e) {\n        return null;\n      }\n    };\n  }\n\n  var service = getService(),\n      $animator = service('$animator'),\n      $animate = service('$animate');\n\n  // Returns a set of DOM manipulation functions based on which Angular version\n  // it should use\n  function getRenderer(attrs, scope) {\n    var statics = {\n      enter: function (element, target, cb) { target.after(element); cb(); },\n      leave: function (element, cb) { element.remove(); cb(); }\n    };\n\n    if (!!attrs.noanimation) return statics;\n\n    function animEnabled(element) {\n      if (ngMajorVer === 1 && ngMinorVer >= 4) return !!$animate.enabled(element);\n      if (ngMajorVer === 1 && ngMinorVer >= 2) return !!$animate.enabled();\n      return (!!$animator);\n    }\n\n    // ng 1.2+\n    if ($animate) {\n      return {\n        enter: function(element, target, cb) {\n          if (!animEnabled(element)) {\n            statics.enter(element, target, cb);\n          } else if (angular.version.minor > 2) {\n            $animate.enter(element, null, target).then(cb);\n          } else {\n            $animate.enter(element, null, target, cb);\n          }\n        },\n        leave: function(element, cb) {\n          if (!animEnabled(element)) {\n            statics.leave(element, cb);\n          } else if (angular.version.minor > 2) {\n            $animate.leave(element).then(cb);\n          } else {\n            $animate.leave(element, cb);\n          }\n        }\n      };\n    }\n\n    // ng 1.1.5\n    if ($animator) {\n      var animate = $animator && $animator(scope, attrs);\n\n      return {\n        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },\n        leave: function(element, cb) { animate.leave(element); cb(); }\n      };\n    }\n\n    return statics;\n  }\n\n  var directive = {\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    compile: function (tElement, tAttrs, $transclude) {\n      return function (scope, $element, attrs) {\n        var previousEl, currentEl, currentScope, latestLocals,\n            onloadExp     = attrs.onload || '',\n            autoScrollExp = attrs.autoscroll,\n            renderer      = getRenderer(attrs, scope);\n\n        scope.$on('$stateChangeSuccess', function() {\n          updateView(false);\n        });\n\n        updateView(true);\n\n        function cleanupLastView() {\n          var _previousEl = previousEl;\n          var _currentScope = currentScope;\n\n          if (_currentScope) {\n            _currentScope._willBeDestroyed = true;\n          }\n\n          function cleanOld() {\n            if (_previousEl) {\n              _previousEl.remove();\n            }\n\n            if (_currentScope) {\n              _currentScope.$destroy();\n            }\n          }\n\n          if (currentEl) {\n            renderer.leave(currentEl, function() {\n              cleanOld();\n              previousEl = null;\n            });\n\n            previousEl = currentEl;\n          } else {\n            cleanOld();\n            previousEl = null;\n          }\n\n          currentEl = null;\n          currentScope = null;\n        }\n\n        function updateView(firstTime) {\n          var newScope,\n              name            = getUiViewName(scope, attrs, $element, $interpolate),\n              previousLocals  = name && $state.$current && $state.$current.locals[name];\n\n          if (!firstTime && previousLocals === latestLocals || scope._willBeDestroyed) return; // nothing to do\n          newScope = scope.$new();\n          latestLocals = $state.$current.locals[name];\n\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoading\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description\n           *\n           * Fired once the view **begins loading**, *before* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           * @param {string} viewName Name of the view.\n           */\n          newScope.$emit('$viewContentLoading', name);\n\n          var clone = $transclude(newScope, function(clone) {\n            renderer.enter(clone, $element, function onUiViewEnter() {\n              if(currentScope) {\n                currentScope.$emit('$viewContentAnimationEnded');\n              }\n\n              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                $uiViewScroll(clone);\n              }\n            });\n            cleanupLastView();\n          });\n\n          currentEl = clone;\n          currentScope = newScope;\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoaded\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description\n           * Fired once the view is **loaded**, *after* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           * @param {string} viewName Name of the view.\n           */\n          currentScope.$emit('$viewContentLoaded', name);\n          currentScope.$eval(onloadExp);\n        }\n      };\n    }\n  };\n\n  return directive;\n}\n\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];\nfunction $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    compile: function (tElement) {\n      var initial = tElement.html();\n      return function (scope, $element, attrs) {\n        var current = $state.$current,\n            name = getUiViewName(scope, attrs, $element, $interpolate),\n            locals  = current && current.locals[name];\n\n        if (! locals) {\n          return;\n        }\n\n        $element.data('$uiView', { name: name, state: locals.$$state });\n        $element.html(locals.$template ? locals.$template : initial);\n\n        var link = $compile($element.contents());\n\n        if (locals.$$controller) {\n          locals.$scope = scope;\n          locals.$element = $element;\n          var controller = $controller(locals.$$controller, locals);\n          if (locals.$$controllerAs) {\n            scope[locals.$$controllerAs] = controller;\n          }\n          $element.data('$ngControllerController', controller);\n          $element.children().data('$ngControllerController', controller);\n        }\n\n        link(scope);\n      };\n    }\n  };\n}\n\n/**\n * Shared ui-view code for both directives:\n * Given scope, element, and its attributes, return the view's name\n */\nfunction getUiViewName(scope, attrs, element, $interpolate) {\n  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);\n  var inherited = element.inheritedData('$uiView');\n  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));\n}\n\nangular.module('ui.router.state').directive('uiView', $ViewDirective);\nangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n\nfunction parseStateRef(ref, current) {\n  var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\n  if (preparsed) ref = current + '(' + preparsed[1] + ')';\n  parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n  return { state: parsed[1], paramExpr: parsed[3] || null };\n}\n\nfunction stateContext(el) {\n  var stateData = el.parent().inheritedData('$uiView');\n\n  if (stateData && stateData.state && stateData.state.name) {\n    return stateData.state;\n  }\n}\n\nfunction getTypeInfo(el) {\n  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n  var isForm = el[0].nodeName === \"FORM\";\n\n  return {\n    attr: isForm ? \"action\" : (isSvg ? 'xlink:href' : 'href'),\n    isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\n    clickable: !isForm\n  };\n}\n\nfunction clickHook(el, $state, $timeout, type, current) {\n  return function(e) {\n    var button = e.which || e.button, target = current();\n\n    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\n      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n      var transition = $timeout(function() {\n        $state.go(target.state, target.params, target.options);\n      });\n      e.preventDefault();\n\n      // if the state has no URL, ignore one preventDefault from the <a> directive.\n      var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1: 0;\n\n      e.preventDefault = function() {\n        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);\n      };\n    }\n  };\n}\n\nfunction defaultOpts(el, $state) {\n  return { relative: stateContext(el) || $state.$current, inherit: true };\n}\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref\n *\n * @requires ui.router.state.$state\n * @requires $timeout\n *\n * @restrict A\n *\n * @description\n * A directive that binds a link (`<a>` tag) to a state. If the state has an associated\n * URL, the directive will automatically generate & update the `href` attribute via\n * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking\n * the link will trigger a state transition with optional parameters.\n *\n * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be\n * handled natively by the browser.\n *\n * You can also use relative state paths within ui-sref, just like the relative\n * paths passed to `$state.go()`. You just need to be aware that the path is relative\n * to the state that the link lives in, in other words the state that loaded the\n * template containing the link.\n *\n * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}\n * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,\n * and `reload`.\n *\n * @example\n * Here's an example of how you'd use ui-sref and how it would compile. If you have the\n * following template:\n * <pre>\n * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * </pre>\n *\n * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\n * <pre>\n * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n *     </li>\n * </ul>\n *\n * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n * </pre>\n *\n * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}\n */\n$StateRefDirective.$inject = ['$state', '$timeout'];\nfunction $StateRefDirective($state, $timeout) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var ref    = parseStateRef(attrs.uiSref, $state.current.name);\n      var def    = { state: ref.state, href: null, params: null };\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n\n      def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});\n\n      var update = function(val) {\n        if (val) def.params = angular.copy(val);\n        def.href = $state.href(ref.state, def.params, def.options);\n\n        if (active) active.$$addStateInfo(ref.state, def.params);\n        if (def.href !== null) attrs.$set(type.attr, def.href);\n      };\n\n      if (ref.paramExpr) {\n        scope.$watch(ref.paramExpr, function(val) { if (val !== def.params) update(val); }, true);\n        def.params = angular.copy(scope.$eval(ref.paramExpr));\n      }\n      update();\n\n      if (!type.clickable) return;\n      element.bind(\"click\", clickHook(element, $state, $timeout, type, function() { return def; }));\n    }\n  };\n}\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-state\n *\n * @requires ui.router.state.uiSref\n *\n * @restrict A\n *\n * @description\n * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,\n * params and override options.\n *\n * @param {string} ui-state 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#href $state.href()}\n * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#go $state.go()}\n */\n$StateRefDynamicDirective.$inject = ['$state', '$timeout'];\nfunction $StateRefDynamicDirective($state, $timeout) {\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var type   = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var group  = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];\n      var watch  = '[' + group.map(function(val) { return val || 'null'; }).join(', ') + ']';\n      var def    = { state: null, params: null, options: null, href: null };\n\n      function runStateRefLink (group) {\n        def.state = group[0]; def.params = group[1]; def.options = group[2];\n        def.href = $state.href(def.state, def.params, def.options);\n\n        if (active) active.$$addStateInfo(def.state, def.params);\n        if (def.href) attrs.$set(type.attr, def.href);\n      }\n\n      scope.$watch(watch, runStateRefLink, true);\n      runStateRefLink(scope.$eval(watch));\n\n      if (!type.clickable) return;\n      element.bind(\"click\", clickHook(element, $state, $timeout, type, function() { return def; }));\n    }\n  };\n}\n\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref-active\n *\n * @requires ui.router.state.$state\n * @requires ui.router.state.$stateParams\n * @requires $interpolate\n *\n * @restrict A\n *\n * @description\n * A directive working alongside ui-sref to add classes to an element when the\n * related ui-sref directive's state is active, and removing them when it is inactive.\n * The primary use-case is to simplify the special appearance of navigation menus\n * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\n * distinguishing it from the inactive menu items.\n *\n * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\n * ui-sref-active found at the same level or above the ui-sref will be used.\n *\n * Will activate when the ui-sref's target state or any child state is active. If you\n * need to activate only when the ui-sref target state is active and *not* any of\n * it's children, then you will use\n * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}\n *\n * @example\n * Given the following template:\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item\">\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n *\n *\n * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item active\">\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n *\n * The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * Multiple classes may be specified in a space-separated format:\n * <pre>\n * <ul>\n *   <li ui-sref-active='class1 class2 class3'>\n *     <a ui-sref=\"app.user\">link</a>\n *   </li>\n * </ul>\n * </pre>\n *\n * It is also possible to pass ui-sref-active an expression that evaluates\n * to an object hash, whose keys represent active class names and whose\n * values represent the respective state names/globs.\n * ui-sref-active will match if the current active state **includes** any of\n * the specified state names/globs, even the abstract ones.\n *\n * @Example\n * Given the following template, with \"admin\" being an abstract state:\n * <pre>\n * <div ui-sref-active=\"{'active': 'admin.*'}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * </pre>\n *\n * When the current state is \"admin.roles\" the \"active\" class will be applied\n * to both the <div> and <a> elements. It is important to note that the state\n * names/globs passed to ui-sref-active shadow the state provided by ui-sref.\n */\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref-active-eq\n *\n * @requires ui.router.state.$state\n * @requires ui.router.state.$stateParams\n * @requires $interpolate\n *\n * @restrict A\n *\n * @description\n * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate\n * when the exact target state used in the `ui-sref` is active; no child states.\n *\n */\n$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];\nfunction $StateRefActiveDirective($state, $stateParams, $interpolate) {\n  return  {\n    restrict: \"A\",\n    controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {\n      var states = [], activeClasses = {}, activeEqClass, uiSrefActive;\n\n      // There probably isn't much point in $observing this\n      // uiSrefActive and uiSrefActiveEq share the same directive object with some\n      // slight difference in logic routing\n      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\n      try {\n        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n      } catch (e) {\n        // Do nothing. uiSrefActive is not a valid expression.\n        // Fall back to using $interpolate below\n      }\n      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n      if (isObject(uiSrefActive)) {\n        forEach(uiSrefActive, function(stateOrName, activeClass) {\n          if (isString(stateOrName)) {\n            var ref = parseStateRef(stateOrName, $state.current.name);\n            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n          }\n        });\n      }\n\n      // Allow uiSref to communicate with uiSrefActive[Equals]\n      this.$$addStateInfo = function (newState, newParams) {\n        // we already got an explicit state provided by ui-sref-active, so we\n        // shadow the one that comes from ui-sref\n        if (isObject(uiSrefActive) && states.length > 0) {\n          return;\n        }\n        addState(newState, newParams, uiSrefActive);\n        update();\n      };\n\n      $scope.$on('$stateChangeSuccess', update);\n\n      function addState(stateName, stateParams, activeClass) {\n        var state = $state.get(stateName, stateContext($element));\n        var stateHash = createStateHash(stateName, stateParams);\n\n        states.push({\n          state: state || { name: stateName },\n          params: stateParams,\n          hash: stateHash\n        });\n\n        activeClasses[stateHash] = activeClass;\n      }\n\n      /**\n       * @param {string} state\n       * @param {Object|string} [params]\n       * @return {string}\n       */\n      function createStateHash(state, params) {\n        if (!isString(state)) {\n          throw new Error('state should be a string');\n        }\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        params = $scope.$eval(params);\n        if (isObject(params)) {\n          return state + toJson(params);\n        }\n        return state;\n      }\n\n      // Update route state\n      function update() {\n        for (var i = 0; i < states.length; i++) {\n          if (anyMatch(states[i].state, states[i].params)) {\n            addClass($element, activeClasses[states[i].hash]);\n          } else {\n            removeClass($element, activeClasses[states[i].hash]);\n          }\n\n          if (exactMatch(states[i].state, states[i].params)) {\n            addClass($element, activeEqClass);\n          } else {\n            removeClass($element, activeEqClass);\n          }\n        }\n      }\n\n      function addClass(el, className) { $timeout(function () { el.addClass(className); }); }\n      function removeClass(el, className) { el.removeClass(className); }\n      function anyMatch(state, params) { return $state.includes(state.name, params); }\n      function exactMatch(state, params) { return $state.is(state.name, params); }\n\n      update();\n    }]\n  };\n}\n\nangular.module('ui.router.state')\n  .directive('uiSref', $StateRefDirective)\n  .directive('uiSrefActive', $StateRefActiveDirective)\n  .directive('uiSrefActiveEq', $StateRefActiveDirective)\n  .directive('uiState', $StateRefDynamicDirective);\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:isState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\n */\n$IsStateFilter.$inject = ['$state'];\nfunction $IsStateFilter($state) {\n  var isFilter = function (state, params) {\n    return $state.is(state, params);\n  };\n  isFilter.$stateful = true;\n  return isFilter;\n}\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:includedByState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\n */\n$IncludedByStateFilter.$inject = ['$state'];\nfunction $IncludedByStateFilter($state) {\n  var includesFilter = function (state, params, options) {\n    return $state.includes(state, params, options);\n  };\n  includesFilter.$stateful = true;\n  return  includesFilter;\n}\n\nangular.module('ui.router.state')\n  .filter('isState', $IsStateFilter)\n  .filter('includedByState', $IncludedByStateFilter);\n})(window, window.angular);"]}