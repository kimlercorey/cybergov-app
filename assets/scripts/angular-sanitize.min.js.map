{"version":3,"sources":["angular-sanitize.min.js"],"names":["window","angular","$SanitizeProvider","toMap","str","lowercaseKeys","i","obj","items","split","length","lowercase","htmlParserImpl","html","handler","undefined","inertBodyElement","innerHTML","mXSSAttempts","$sanitizeMinErr","document","documentMode","stripCustomNsAttrs","node","firstChild","nodeType","start","nodeName","toLowerCase","attrToMap","attributes","chars","textContent","nextNode","end","nextSibling","parentNode","removeChild","attrs","map","ii","attr","name","value","encodeEntities","replace","SURROGATE_PAIR_REGEXP","hi","charCodeAt","low","NON_ALPHANUMERIC_REGEXP","htmlSanitizeWriterImpl","buf","uriValidator","ignoreCurrentElement","out","bind","push","tag","blockedElements","validElements","forEach","key","lkey","isImage","validAttrs","uriAttrs","voidElements","Node","ELEMENT_NODE","l","attrNode","attrName","lastIndexOf","removeAttributeNode","svgEnabled","this","$get","$$sanitizeUri","extend","svgElements","htmlParser","htmlSanitizeWriter","uri","test","join","enableSvg","isDefined","noop","optionalEndTagBlockElements","optionalEndTagInlineElements","optionalEndTagElements","blockElements","inlineElements","htmlAttrs","svgAttrs","doc","implementation","createHTMLDocument","docElement","documentElement","getDocumentElement","bodyElements","getElementsByTagName","createElement","appendChild","sanitizeText","writer","$$minErr","module","provider","filter","$sanitize","LINKY_URL_REGEXP","MAILTO_REGEXP","linkyMinErr","isFunction","isObject","isString","text","target","addText","addLink","url","linkAttributes","attributesFn","match","raw","index","substr","substring"],"mappings":"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","file":"angular-sanitize.min.js","sourcesContent":["/**\n * @license AngularJS v1.5.8\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\nvar bind;\nvar extend;\nvar forEach;\nvar isDefined;\nvar lowercase;\nvar noop;\nvar htmlParser;\nvar htmlSanitizeWriter;\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * # ngSanitize\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n *\n * <div doc-module-components=\"ngSanitize\"></div>\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   Sanitizes an html string by stripping all potentially dangerous tokens.\n *\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string.\n *\n *   The whitelist for URL sanitization of attribute values is configured using the functions\n *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider\n *   `$compileProvider`}.\n *\n *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.\n *\n * @param {string} html HTML input.\n * @returns {string} Sanitized HTML.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getInnerHtml()).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\n\n\n/**\n * @ngdoc provider\n * @name $sanitizeProvider\n *\n * @description\n * Creates and configures {@link $sanitize} instance.\n */\nfunction $SanitizeProvider() {\n  var svgEnabled = false;\n\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    if (svgEnabled) {\n      extend(validElements, svgElements);\n    }\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n\n\n  /**\n   * @ngdoc method\n   * @name $sanitizeProvider#enableSvg\n   * @kind function\n   *\n   * @description\n   * Enables a subset of svg to be supported by the sanitizer.\n   *\n   * <div class=\"alert alert-warning\">\n   *   <p>By enabling this setting without taking other precautions, you might expose your\n   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned\n   *   outside of the containing element and be rendered over other elements on the page (e.g. a login\n   *   link). Such behavior can then result in phishing incidents.</p>\n   *\n   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg\n   *   tags within the sanitized content:</p>\n   *\n   *   <br>\n   *\n   *   <pre><code>\n   *   .rootOfTheIncludedContent svg {\n   *     overflow: hidden !important;\n   *   }\n   *   </code></pre>\n   * </div>\n   *\n   * @param {boolean=} flag Enable or disable SVG support in the sanitizer.\n   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called\n   *    without an argument or self for chaining otherwise.\n   */\n  this.enableSvg = function(enableSvg) {\n    if (isDefined(enableSvg)) {\n      svgEnabled = enableSvg;\n      return this;\n    } else {\n      return svgEnabled;\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // Private stuff\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n\n  bind = angular.bind;\n  extend = angular.extend;\n  forEach = angular.forEach;\n  isDefined = angular.isDefined;\n  lowercase = angular.lowercase;\n  noop = angular.noop;\n\n  htmlParser = htmlParserImpl;\n  htmlSanitizeWriter = htmlSanitizeWriterImpl;\n\n  // Regular Expressions for parsing tags and attributes\n  var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n    // Match everything outside of normal chars and \" (quote character)\n    NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n\n  // Good source of info about elements and attributes\n  // http://dev.w3.org/html5/spec/Overview.html#semantics\n  // http://simon.html5.org/html-elements\n\n  // Safe Void Elements - HTML5\n  // http://dev.w3.org/html5/spec/Overview.html#void-elements\n  var voidElements = toMap(\"area,br,col,hr,img,wbr\");\n\n  // Elements that you can, intentionally, leave open (and which close themselves)\n  // http://dev.w3.org/html5/spec/Overview.html#optional-tags\n  var optionalEndTagBlockElements = toMap(\"colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr\"),\n      optionalEndTagInlineElements = toMap(\"rp,rt\"),\n      optionalEndTagElements = extend({},\n                                              optionalEndTagInlineElements,\n                                              optionalEndTagBlockElements);\n\n  // Safe Block Elements - HTML5\n  var blockElements = extend({}, optionalEndTagBlockElements, toMap(\"address,article,\" +\n          \"aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,\" +\n          \"h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul\"));\n\n  // Inline Elements - HTML5\n  var inlineElements = extend({}, optionalEndTagInlineElements, toMap(\"a,abbr,acronym,b,\" +\n          \"bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,\" +\n          \"samp,small,span,strike,strong,sub,sup,time,tt,u,var\"));\n\n  // SVG Elements\n  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\n  // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.\n  // They can potentially allow for arbitrary javascript to be executed. See #11290\n  var svgElements = toMap(\"circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,\" +\n          \"hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,\" +\n          \"radialGradient,rect,stop,svg,switch,text,title,tspan\");\n\n  // Blocked Elements (will be stripped)\n  var blockedElements = toMap(\"script,style\");\n\n  var validElements = extend({},\n                                     voidElements,\n                                     blockElements,\n                                     inlineElements,\n                                     optionalEndTagElements);\n\n  //Attributes that have href and hence need to be sanitized\n  var uriAttrs = toMap(\"background,cite,href,longdesc,src,xlink:href\");\n\n  var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\n      'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\n      'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\n      'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +\n      'valign,value,vspace,width');\n\n  // SVG attributes (without \"id\" and \"name\" attributes)\n  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\n  var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\n      'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +\n      'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +\n      'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +\n      'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +\n      'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +\n      'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +\n      'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +\n      'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +\n      'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +\n      'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +\n      'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +\n      'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +\n      'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +\n      'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);\n\n  var validAttrs = extend({},\n                                  uriAttrs,\n                                  svgAttrs,\n                                  htmlAttrs);\n\n  function toMap(str, lowercaseKeys) {\n    var obj = {}, items = str.split(','), i;\n    for (i = 0; i < items.length; i++) {\n      obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;\n    }\n    return obj;\n  }\n\n  var inertBodyElement;\n  (function(window) {\n    var doc;\n    if (window.document && window.document.implementation) {\n      doc = window.document.implementation.createHTMLDocument(\"inert\");\n    } else {\n      throw $sanitizeMinErr('noinert', \"Can't create an inert html document\");\n    }\n    var docElement = doc.documentElement || doc.getDocumentElement();\n    var bodyElements = docElement.getElementsByTagName('body');\n\n    // usually there should be only one body element in the document, but IE doesn't have any, so we need to create one\n    if (bodyElements.length === 1) {\n      inertBodyElement = bodyElements[0];\n    } else {\n      var html = doc.createElement('html');\n      inertBodyElement = doc.createElement('body');\n      html.appendChild(inertBodyElement);\n      doc.appendChild(html);\n    }\n  })(window);\n\n  /**\n   * @example\n   * htmlParser(htmlString, {\n   *     start: function(tag, attrs) {},\n   *     end: function(tag) {},\n   *     chars: function(text) {},\n   *     comment: function(text) {}\n   * });\n   *\n   * @param {string} html string\n   * @param {object} handler\n   */\n  function htmlParserImpl(html, handler) {\n    if (html === null || html === undefined) {\n      html = '';\n    } else if (typeof html !== 'string') {\n      html = '' + html;\n    }\n    inertBodyElement.innerHTML = html;\n\n    //mXSS protection\n    var mXSSAttempts = 5;\n    do {\n      if (mXSSAttempts === 0) {\n        throw $sanitizeMinErr('uinput', \"Failed to sanitize html because the input is unstable\");\n      }\n      mXSSAttempts--;\n\n      // strip custom-namespaced attributes on IE<=11\n      if (window.document.documentMode) {\n        stripCustomNsAttrs(inertBodyElement);\n      }\n      html = inertBodyElement.innerHTML; //trigger mXSS\n      inertBodyElement.innerHTML = html;\n    } while (html !== inertBodyElement.innerHTML);\n\n    var node = inertBodyElement.firstChild;\n    while (node) {\n      switch (node.nodeType) {\n        case 1: // ELEMENT_NODE\n          handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));\n          break;\n        case 3: // TEXT NODE\n          handler.chars(node.textContent);\n          break;\n      }\n\n      var nextNode;\n      if (!(nextNode = node.firstChild)) {\n      if (node.nodeType == 1) {\n          handler.end(node.nodeName.toLowerCase());\n        }\n        nextNode = node.nextSibling;\n        if (!nextNode) {\n          while (nextNode == null) {\n            node = node.parentNode;\n            if (node === inertBodyElement) break;\n            nextNode = node.nextSibling;\n          if (node.nodeType == 1) {\n              handler.end(node.nodeName.toLowerCase());\n            }\n          }\n        }\n      }\n      node = nextNode;\n    }\n\n    while (node = inertBodyElement.firstChild) {\n      inertBodyElement.removeChild(node);\n    }\n  }\n\n  function attrToMap(attrs) {\n    var map = {};\n    for (var i = 0, ii = attrs.length; i < ii; i++) {\n      var attr = attrs[i];\n      map[attr.name] = attr.value;\n    }\n    return map;\n  }\n\n\n  /**\n   * Escapes all potentially dangerous characters, so that the\n   * resulting string can be safely inserted into attribute or\n   * element text.\n   * @param value\n   * @returns {string} escaped text\n   */\n  function encodeEntities(value) {\n    return value.\n      replace(/&/g, '&amp;').\n      replace(SURROGATE_PAIR_REGEXP, function(value) {\n        var hi = value.charCodeAt(0);\n        var low = value.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n      }).\n      replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n        return '&#' + value.charCodeAt(0) + ';';\n      }).\n      replace(/</g, '&lt;').\n      replace(/>/g, '&gt;');\n  }\n\n  /**\n   * create an HTML/XML writer which writes to buffer\n   * @param {Array} buf use buf.join('') to get out sanitized html string\n   * @returns {object} in the form of {\n   *     start: function(tag, attrs) {},\n   *     end: function(tag) {},\n   *     chars: function(text) {},\n   *     comment: function(text) {}\n   * }\n   */\n  function htmlSanitizeWriterImpl(buf, uriValidator) {\n    var ignoreCurrentElement = false;\n    var out = bind(buf, buf.push);\n    return {\n      start: function(tag, attrs) {\n        tag = lowercase(tag);\n        if (!ignoreCurrentElement && blockedElements[tag]) {\n          ignoreCurrentElement = tag;\n        }\n        if (!ignoreCurrentElement && validElements[tag] === true) {\n          out('<');\n          out(tag);\n          forEach(attrs, function(value, key) {\n            var lkey = lowercase(key);\n            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n            if (validAttrs[lkey] === true &&\n              (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n              out(' ');\n              out(key);\n              out('=\"');\n              out(encodeEntities(value));\n              out('\"');\n            }\n          });\n          out('>');\n        }\n      },\n      end: function(tag) {\n        tag = lowercase(tag);\n        if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {\n          out('</');\n          out(tag);\n          out('>');\n        }\n        if (tag == ignoreCurrentElement) {\n          ignoreCurrentElement = false;\n        }\n      },\n      chars: function(chars) {\n        if (!ignoreCurrentElement) {\n          out(encodeEntities(chars));\n        }\n      }\n    };\n  }\n\n\n  /**\n   * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare\n   * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want\n   * to allow any of these custom attributes. This method strips them all.\n   *\n   * @param node Root element to process\n   */\n  function stripCustomNsAttrs(node) {\n    if (node.nodeType === window.Node.ELEMENT_NODE) {\n      var attrs = node.attributes;\n      for (var i = 0, l = attrs.length; i < l; i++) {\n        var attrNode = attrs[i];\n        var attrName = attrNode.name.toLowerCase();\n        if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {\n          node.removeAttributeNode(attrNode);\n          i--;\n          l--;\n        }\n      }\n    }\n\n    var nextNode = node.firstChild;\n    if (nextNode) {\n      stripCustomNsAttrs(nextNode);\n    }\n\n    nextNode = node.nextSibling;\n    if (nextNode) {\n      stripCustomNsAttrs(nextNode);\n    }\n  }\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.\n * @param {object|function(url)} [attributes] Add custom attributes to the link element.\n *\n *    Can be one of:\n *\n *    - `object`: A map of attributes\n *    - `function`: Takes the url as a parameter and returns a map of attributes\n *\n *    If the map of attributes contains a value for `target`, it overrides the value of\n *    the target parameter.\n *\n *\n * @returns {string} Html-linkified and {@link $sanitize sanitized} text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <th>Filter</th>\n           <th>Source</th>\n           <th>Rendered</th>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"linky-custom-attributes\">\n          <td>linky custom attributes</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"script.js\">\n       angular.module('linkyExample', ['ngSanitize'])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.snippet =\n             'Pretty text with some links:\\n'+\n             'http://angularjs.org/,\\n'+\n             'mailto:us@somewhere.org,\\n'+\n             'another@somewhere.org,\\n'+\n             'and one more: ftp://127.0.0.1/.';\n           $scope.snippetWithSingleURL = 'http://angularjs.org/';\n         }]);\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n\n       it('should optionally add custom attributes', function() {\n        expect(element(by.id('linky-custom-attributes')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"\\u201d\\u2019]/i,\n      MAILTO_REGEXP = /^mailto:/i;\n\n  var linkyMinErr = angular.$$minErr('linky');\n  var isDefined = angular.isDefined;\n  var isFunction = angular.isFunction;\n  var isObject = angular.isObject;\n  var isString = angular.isString;\n\n  return function(text, target, attributes) {\n    if (text == null || text === '') return text;\n    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);\n\n    var attributesFn =\n      isFunction(attributes) ? attributes :\n      isObject(attributes) ? function getAttributesObject() {return attributes;} :\n      function getEmptyAttributesObject() {return {};};\n\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/www/mailto then assume mailto\n      if (!match[2] && !match[4]) {\n        url = (match[3] ? 'http://' : 'mailto:') + url;\n      }\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      var key, linkAttributes = attributesFn(url);\n      html.push('<a ');\n\n      for (key in linkAttributes) {\n        html.push(key + '=\"' + linkAttributes[key] + '\" ');\n      }\n\n      if (isDefined(target) && !('target' in linkAttributes)) {\n        html.push('target=\"',\n                  target,\n                  '\" ');\n      }\n      html.push('href=\"',\n                url.replace(/\"/g, '&quot;'),\n                '\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n"]}